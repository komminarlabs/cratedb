// Package cratedb provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package cratedb

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV2AwsSubscriptionsSubscriptionId request
	GetApiV2AwsSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2AwsSubscriptionsSubscriptionIdWithBody request with any body
	PatchApiV2AwsSubscriptionsSubscriptionIdWithBody(ctx context.Context, subscriptionId PathSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2AwsSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, body PatchApiV2AwsSubscriptionsSubscriptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2AzureSubscriptionsSubscriptionId request
	GetApiV2AzureSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Clusters request
	GetApiV2Clusters(ctx context.Context, params *GetApiV2ClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadApiV2ClustersNameName request
	HeadApiV2ClustersNameName(ctx context.Context, name PathName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2ClustersClusterId request
	DeleteApiV2ClustersClusterId(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterId request
	GetApiV2ClustersClusterId(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2ClustersClusterIdWithBody request with any body
	PatchApiV2ClustersClusterIdWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2ClustersClusterId(ctx context.Context, clusterId PathClusterId, body PatchApiV2ClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdAvailableProducts request
	GetApiV2ClustersClusterIdAvailableProducts(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdAvailableUpgrades request
	GetApiV2ClustersClusterIdAvailableUpgrades(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2ClustersClusterIdBackupScheduleWithBody request with any body
	PutApiV2ClustersClusterIdBackupScheduleWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2ClustersClusterIdBackupSchedule(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdBackupScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2ClustersClusterIdDeletionProtectionWithBody request with any body
	PutApiV2ClustersClusterIdDeletionProtectionWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2ClustersClusterIdDeletionProtection(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdDeletionProtectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdExportJobs request
	GetApiV2ClustersClusterIdExportJobs(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2ClustersClusterIdExportJobsWithBody request with any body
	PostApiV2ClustersClusterIdExportJobsWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2ClustersClusterIdExportJobs(ctx context.Context, clusterId PathClusterId, body PostApiV2ClustersClusterIdExportJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2ClustersClusterIdExportJobsExportJobId request
	DeleteApiV2ClustersClusterIdExportJobsExportJobId(ctx context.Context, clusterId PathClusterId, exportJobId PathExportJobId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdExportJobsExportJobId request
	GetApiV2ClustersClusterIdExportJobsExportJobId(ctx context.Context, clusterId PathClusterId, exportJobId PathExportJobId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdImportJobs request
	GetApiV2ClustersClusterIdImportJobs(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2ClustersClusterIdImportJobsWithBody request with any body
	PostApiV2ClustersClusterIdImportJobsWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2ClustersClusterIdImportJobs(ctx context.Context, clusterId PathClusterId, body PostApiV2ClustersClusterIdImportJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2ClustersClusterIdImportJobsImportJobId request
	DeleteApiV2ClustersClusterIdImportJobsImportJobId(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdImportJobsImportJobId request
	GetApiV2ClustersClusterIdImportJobsImportJobId(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdImportJobsImportJobIdProgress request
	GetApiV2ClustersClusterIdImportJobsImportJobIdProgress(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, params *GetApiV2ClustersClusterIdImportJobsImportJobIdProgressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2ClustersClusterIdIpRestrictionsWithBody request with any body
	PutApiV2ClustersClusterIdIpRestrictionsWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2ClustersClusterIdIpRestrictions(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdIpRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdJwt request
	GetApiV2ClustersClusterIdJwt(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdMetricsMetricId request
	GetApiV2ClustersClusterIdMetricsMetricId(ctx context.Context, clusterId PathClusterId, metricId GetApiV2ClustersClusterIdMetricsMetricIdParamsMetricId, params *GetApiV2ClustersClusterIdMetricsMetricIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2ClustersClusterIdNodesOrdinal request
	DeleteApiV2ClustersClusterIdNodesOrdinal(ctx context.Context, clusterId PathClusterId, ordinal PathOrdinal, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdOperations request
	GetApiV2ClustersClusterIdOperations(ctx context.Context, clusterId PathClusterId, params *GetApiV2ClustersClusterIdOperationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2ClustersClusterIdProductWithBody request with any body
	PutApiV2ClustersClusterIdProductWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2ClustersClusterIdProduct(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2ClustersClusterIdScaleWithBody request with any body
	PutApiV2ClustersClusterIdScaleWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2ClustersClusterIdScale(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdScaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ClustersClusterIdSnapshots request
	GetApiV2ClustersClusterIdSnapshots(ctx context.Context, clusterId PathClusterId, params *GetApiV2ClustersClusterIdSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2ClustersClusterIdSnapshotsRestoreWithBody request with any body
	PostApiV2ClustersClusterIdSnapshotsRestoreWithBody(ctx context.Context, clusterId PathTargetClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2ClustersClusterIdSnapshotsRestore(ctx context.Context, clusterId PathTargetClusterId, body PostApiV2ClustersClusterIdSnapshotsRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2ClustersClusterIdStorageWithBody request with any body
	PutApiV2ClustersClusterIdStorageWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2ClustersClusterIdStorage(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2ClustersClusterIdSuspendWithBody request with any body
	PutApiV2ClustersClusterIdSuspendWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2ClustersClusterIdSuspend(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdSuspendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2ClustersClusterIdUpgradeWithBody request with any body
	PutApiV2ClustersClusterIdUpgradeWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2ClustersClusterIdUpgrade(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Configurations request
	GetApiV2Configurations(ctx context.Context, params *GetApiV2ConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ConfigurationsKey request
	GetApiV2ConfigurationsKey(ctx context.Context, key PathConfigurationKey, params *GetApiV2ConfigurationsKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2ConfigurationsKeyWithBody request with any body
	PutApiV2ConfigurationsKeyWithBody(ctx context.Context, key PathConfigurationKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2ConfigurationsKey(ctx context.Context, key PathConfigurationKey, body PutApiV2ConfigurationsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2FeaturesStatus request
	GetApiV2FeaturesStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2GcpSubscriptionsSubscriptionId request
	GetApiV2GcpSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2IntegrationsAwsS3Buckets request
	GetApiV2IntegrationsAwsS3Buckets(ctx context.Context, params *GetApiV2IntegrationsAwsS3BucketsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2IntegrationsAwsS3Objects request
	GetApiV2IntegrationsAwsS3Objects(ctx context.Context, params *GetApiV2IntegrationsAwsS3ObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2IntegrationsAzureBlobStorageContainers request
	GetApiV2IntegrationsAzureBlobStorageContainers(ctx context.Context, params *GetApiV2IntegrationsAzureBlobStorageContainersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2IntegrationsAzureBlobs request
	GetApiV2IntegrationsAzureBlobs(ctx context.Context, params *GetApiV2IntegrationsAzureBlobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Meta request
	GetApiV2Meta(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2MetaCratedbVersions request
	GetApiV2MetaCratedbVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2MetaIpAddress request
	GetApiV2MetaIpAddress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2MetaJwk request
	GetApiV2MetaJwk(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2MetaJwtRefreshWithBody request with any body
	PostApiV2MetaJwtRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2MetaJwtRefresh(ctx context.Context, body PostApiV2MetaJwtRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Organizations request
	GetApiV2Organizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2OrganizationsWithBody request with any body
	PostApiV2OrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2Organizations(ctx context.Context, body PostApiV2OrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2OrganizationsOrganizationId request
	DeleteApiV2OrganizationsOrganizationId(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationId request
	GetApiV2OrganizationsOrganizationId(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2OrganizationsOrganizationIdWithBody request with any body
	PutApiV2OrganizationsOrganizationIdWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2OrganizationsOrganizationId(ctx context.Context, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdAuditlogs request
	GetApiV2OrganizationsOrganizationIdAuditlogs(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdAuditlogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdClusters request
	GetApiV2OrganizationsOrganizationIdClusters(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2OrganizationsOrganizationIdClustersWithBody request with any body
	PostApiV2OrganizationsOrganizationIdClustersWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2OrganizationsOrganizationIdClusters(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonth request
	GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonth(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdCredits request
	GetApiV2OrganizationsOrganizationIdCredits(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdCreditsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2OrganizationsOrganizationIdCreditsWithBody request with any body
	PostApiV2OrganizationsOrganizationIdCreditsWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2OrganizationsOrganizationIdCredits(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdCreditsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2OrganizationsOrganizationIdCreditsCreditId request
	DeleteApiV2OrganizationsOrganizationIdCreditsCreditId(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithBody request with any body
	PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithBody(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2OrganizationsOrganizationIdCreditsCreditId(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, body PatchApiV2OrganizationsOrganizationIdCreditsCreditIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdCustomer request
	GetApiV2OrganizationsOrganizationIdCustomer(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2OrganizationsOrganizationIdCustomerWithBody request with any body
	PutApiV2OrganizationsOrganizationIdCustomerWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2OrganizationsOrganizationIdCustomer(ctx context.Context, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdFiles request
	GetApiV2OrganizationsOrganizationIdFiles(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2OrganizationsOrganizationIdFilesWithBody request with any body
	PostApiV2OrganizationsOrganizationIdFilesWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2OrganizationsOrganizationIdFiles(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2OrganizationsOrganizationIdFilesFileId request
	DeleteApiV2OrganizationsOrganizationIdFilesFileId(ctx context.Context, organizationId PathOrganizationId, fileId PathFileId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdFilesFileId request
	GetApiV2OrganizationsOrganizationIdFilesFileId(ctx context.Context, organizationId PathOrganizationId, fileId PathFileId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdInvitations request
	GetApiV2OrganizationsOrganizationIdInvitations(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2OrganizationsOrganizationIdInvitationsInviteToken request
	DeleteApiV2OrganizationsOrganizationIdInvitationsInviteToken(ctx context.Context, organizationId PathOrganizationId, inviteToken PathInviteToken, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdMetricsPrometheus request
	GetApiV2OrganizationsOrganizationIdMetricsPrometheus(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdPaymentMethods request
	GetApiV2OrganizationsOrganizationIdPaymentMethods(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdProjects request
	GetApiV2OrganizationsOrganizationIdProjects(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdQuotas request
	GetApiV2OrganizationsOrganizationIdQuotas(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdRegions request
	GetApiV2OrganizationsOrganizationIdRegions(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdRemainingBudget request
	GetApiV2OrganizationsOrganizationIdRemainingBudget(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdRemainingBudgetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdSecrets request
	GetApiV2OrganizationsOrganizationIdSecrets(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2OrganizationsOrganizationIdSecretsWithBody request with any body
	PostApiV2OrganizationsOrganizationIdSecretsWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2OrganizationsOrganizationIdSecrets(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2OrganizationsOrganizationIdSecretsSecretId request
	DeleteApiV2OrganizationsOrganizationIdSecretsSecretId(ctx context.Context, organizationId PathOrganizationId, secretId PathOrganizationSecretId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdSubscriptions request
	GetApiV2OrganizationsOrganizationIdSubscriptions(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdUsers request
	GetApiV2OrganizationsOrganizationIdUsers(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2OrganizationsOrganizationIdUsersWithBody request with any body
	PostApiV2OrganizationsOrganizationIdUsersWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2OrganizationsOrganizationIdUsers(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmail request
	DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmail(ctx context.Context, organizationId PathOrganizationId, userIdOrEmail PathUserIdOrEmail, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Products request
	GetApiV2Products(ctx context.Context, params *GetApiV2ProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ProductsClustersPrice request
	GetApiV2ProductsClustersPrice(ctx context.Context, params *GetApiV2ProductsClustersPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ProductsKind request
	GetApiV2ProductsKind(ctx context.Context, kind PathProductKind, params *GetApiV2ProductsKindParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Projects request
	GetApiV2Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2ProjectsWithBody request with any body
	PostApiV2ProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2Projects(ctx context.Context, body PostApiV2ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2ProjectsProjectId request
	DeleteApiV2ProjectsProjectId(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ProjectsProjectId request
	GetApiV2ProjectsProjectId(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2ProjectsProjectIdWithBody request with any body
	PatchApiV2ProjectsProjectIdWithBody(ctx context.Context, projectId PathProjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2ProjectsProjectId(ctx context.Context, projectId PathProjectId, body PatchApiV2ProjectsProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ProjectsProjectIdClusters request
	GetApiV2ProjectsProjectIdClusters(ctx context.Context, projectId PathProjectId, params *GetApiV2ProjectsProjectIdClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ProjectsProjectIdUsers request
	GetApiV2ProjectsProjectIdUsers(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2ProjectsProjectIdUsersWithBody request with any body
	PostApiV2ProjectsProjectIdUsersWithBody(ctx context.Context, projectId PathProjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2ProjectsProjectIdUsers(ctx context.Context, projectId PathProjectId, body PostApiV2ProjectsProjectIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2ProjectsProjectIdUsersUserIdOrEmail request
	DeleteApiV2ProjectsProjectIdUsersUserIdOrEmail(ctx context.Context, projectId PathProjectId, userIdOrEmail PathUserIdOrEmail, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Regions request
	GetApiV2Regions(ctx context.Context, params *GetApiV2RegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2RegionsWithBody request with any body
	PostApiV2RegionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2Regions(ctx context.Context, body PostApiV2RegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2RegionsRegionName request
	DeleteApiV2RegionsRegionName(ctx context.Context, regionName PathRegionName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2RegionsRegionNameInstallToken request
	GetApiV2RegionsRegionNameInstallToken(ctx context.Context, regionName PathRegionName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2RegionsRegionNameVerifyBackupLocationWithBody request with any body
	PostApiV2RegionsRegionNameVerifyBackupLocationWithBody(ctx context.Context, regionName PathRegionName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2RegionsRegionNameVerifyBackupLocation(ctx context.Context, regionName PathRegionName, body PostApiV2RegionsRegionNameVerifyBackupLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Roles request
	GetApiV2Roles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2StripeBankTransferOrganizationsOrganizationIdSetup request
	PostApiV2StripeBankTransferOrganizationsOrganizationIdSetup(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2StripeCardOrganizationsOrganizationIdSetupPayment request
	PostApiV2StripeCardOrganizationsOrganizationIdSetupPayment(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2StripeCardOrganizationsOrganizationIdSetup request
	PostApiV2StripeCardOrganizationsOrganizationIdSetup(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2StripeOrganizationsOrganizationIdBillingInformation request
	GetApiV2StripeOrganizationsOrganizationIdBillingInformation(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithBody request with any body
	PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2StripeOrganizationsOrganizationIdBillingInformation(ctx context.Context, organizationId PathOrganizationId, body PatchApiV2StripeOrganizationsOrganizationIdBillingInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2StripeOrganizationsOrganizationIdCards request
	GetApiV2StripeOrganizationsOrganizationIdCards(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2StripeOrganizationsOrganizationIdCardsCardId request
	DeleteApiV2StripeOrganizationsOrganizationIdCardsCardId(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithBody request with any body
	PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithBody(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2StripeOrganizationsOrganizationIdCardsCardId(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, body PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2StripeOrganizationsOrganizationIdSetupPayment request
	PostApiV2StripeOrganizationsOrganizationIdSetupPayment(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2StripeOrganizationsOrganizationIdSetup request
	PostApiV2StripeOrganizationsOrganizationIdSetup(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2StripeOrganizationsOrganizationIdValidateCard request
	PostApiV2StripeOrganizationsOrganizationIdValidateCard(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2StripePromotions request
	GetApiV2StripePromotions(ctx context.Context, params *GetApiV2StripePromotionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2StripeSubscriptionsSubscriptionId request
	DeleteApiV2StripeSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2StripeSubscriptionsSubscriptionId request
	GetApiV2StripeSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2StripeSubscriptionsSubscriptionIdInvoices request
	GetApiV2StripeSubscriptionsSubscriptionIdInvoices(ctx context.Context, subscriptionId PathSubscriptionId, params *GetApiV2StripeSubscriptionsSubscriptionIdInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcoming request
	GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcoming(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Subscriptions request
	GetApiV2Subscriptions(ctx context.Context, params *GetApiV2SubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2SubscriptionsWithBody request with any body
	PostApiV2SubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2Subscriptions(ctx context.Context, body PostApiV2SubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2SubscriptionsSubscriptionId request
	DeleteApiV2SubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2SubscriptionsSubscriptionId request
	GetApiV2SubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithBody request with any body
	PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithBody(ctx context.Context, subscriptionId PathSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2SubscriptionsSubscriptionIdAssignOrg(ctx context.Context, subscriptionId PathSubscriptionId, body PatchApiV2SubscriptionsSubscriptionIdAssignOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2SubscriptionsSubscriptionIdWizardRedirect request
	GetApiV2SubscriptionsSubscriptionIdWizardRedirect(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Users request
	GetApiV2Users(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2UsersMe request
	GetApiV2UsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2UsersMeWithBody request with any body
	PatchApiV2UsersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2UsersMe(ctx context.Context, body PatchApiV2UsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2UsersMeAcceptInviteWithBody request with any body
	PostApiV2UsersMeAcceptInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2UsersMeAcceptInvite(ctx context.Context, body PostApiV2UsersMeAcceptInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2UsersMeApiKeys request
	GetApiV2UsersMeApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2UsersMeApiKeys request
	PostApiV2UsersMeApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2UsersMeApiKeysApiKey request
	DeleteApiV2UsersMeApiKeysApiKey(ctx context.Context, apiKey PathApiKey, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2UsersMeApiKeysApiKey request
	GetApiV2UsersMeApiKeysApiKey(ctx context.Context, apiKey PathApiKey, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2UsersMeApiKeysApiKeyWithBody request with any body
	PatchApiV2UsersMeApiKeysApiKeyWithBody(ctx context.Context, apiKey PathApiKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2UsersMeApiKeysApiKey(ctx context.Context, apiKey PathApiKey, body PatchApiV2UsersMeApiKeysApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2UsersMeConfirmEmailWithBody request with any body
	PutApiV2UsersMeConfirmEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2UsersMeConfirmEmail(ctx context.Context, body PutApiV2UsersMeConfirmEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2UsersUserId request
	DeleteApiV2UsersUserId(ctx context.Context, userId PathUserId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV2AwsSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2AwsSubscriptionsSubscriptionIdRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2AwsSubscriptionsSubscriptionIdWithBody(ctx context.Context, subscriptionId PathSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2AwsSubscriptionsSubscriptionIdRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2AwsSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, body PatchApiV2AwsSubscriptionsSubscriptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2AwsSubscriptionsSubscriptionIdRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2AzureSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2AzureSubscriptionsSubscriptionIdRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Clusters(ctx context.Context, params *GetApiV2ClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadApiV2ClustersNameName(ctx context.Context, name PathName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadApiV2ClustersNameNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2ClustersClusterId(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2ClustersClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterId(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2ClustersClusterIdWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2ClustersClusterIdRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2ClustersClusterId(ctx context.Context, clusterId PathClusterId, body PatchApiV2ClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2ClustersClusterIdRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdAvailableProducts(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdAvailableProductsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdAvailableUpgrades(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdAvailableUpgradesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdBackupScheduleWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdBackupScheduleRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdBackupSchedule(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdBackupScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdBackupScheduleRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdDeletionProtectionWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdDeletionProtectionRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdDeletionProtection(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdDeletionProtectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdDeletionProtectionRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdExportJobs(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdExportJobsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ClustersClusterIdExportJobsWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ClustersClusterIdExportJobsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ClustersClusterIdExportJobs(ctx context.Context, clusterId PathClusterId, body PostApiV2ClustersClusterIdExportJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ClustersClusterIdExportJobsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2ClustersClusterIdExportJobsExportJobId(ctx context.Context, clusterId PathClusterId, exportJobId PathExportJobId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2ClustersClusterIdExportJobsExportJobIdRequest(c.Server, clusterId, exportJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdExportJobsExportJobId(ctx context.Context, clusterId PathClusterId, exportJobId PathExportJobId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdExportJobsExportJobIdRequest(c.Server, clusterId, exportJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdImportJobs(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdImportJobsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ClustersClusterIdImportJobsWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ClustersClusterIdImportJobsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ClustersClusterIdImportJobs(ctx context.Context, clusterId PathClusterId, body PostApiV2ClustersClusterIdImportJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ClustersClusterIdImportJobsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2ClustersClusterIdImportJobsImportJobId(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2ClustersClusterIdImportJobsImportJobIdRequest(c.Server, clusterId, importJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdImportJobsImportJobId(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdImportJobsImportJobIdRequest(c.Server, clusterId, importJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdImportJobsImportJobIdProgress(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, params *GetApiV2ClustersClusterIdImportJobsImportJobIdProgressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdImportJobsImportJobIdProgressRequest(c.Server, clusterId, importJobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdIpRestrictionsWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdIpRestrictionsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdIpRestrictions(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdIpRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdIpRestrictionsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdJwt(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdJwtRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdMetricsMetricId(ctx context.Context, clusterId PathClusterId, metricId GetApiV2ClustersClusterIdMetricsMetricIdParamsMetricId, params *GetApiV2ClustersClusterIdMetricsMetricIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdMetricsMetricIdRequest(c.Server, clusterId, metricId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2ClustersClusterIdNodesOrdinal(ctx context.Context, clusterId PathClusterId, ordinal PathOrdinal, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2ClustersClusterIdNodesOrdinalRequest(c.Server, clusterId, ordinal)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdOperations(ctx context.Context, clusterId PathClusterId, params *GetApiV2ClustersClusterIdOperationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdOperationsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdProductWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdProductRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdProduct(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdProductRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdScaleWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdScaleRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdScale(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdScaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdScaleRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ClustersClusterIdSnapshots(ctx context.Context, clusterId PathClusterId, params *GetApiV2ClustersClusterIdSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ClustersClusterIdSnapshotsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ClustersClusterIdSnapshotsRestoreWithBody(ctx context.Context, clusterId PathTargetClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ClustersClusterIdSnapshotsRestoreRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ClustersClusterIdSnapshotsRestore(ctx context.Context, clusterId PathTargetClusterId, body PostApiV2ClustersClusterIdSnapshotsRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ClustersClusterIdSnapshotsRestoreRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdStorageWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdStorageRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdStorage(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdStorageRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdSuspendWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdSuspendRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdSuspend(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdSuspendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdSuspendRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdUpgradeWithBody(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdUpgradeRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ClustersClusterIdUpgrade(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ClustersClusterIdUpgradeRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Configurations(ctx context.Context, params *GetApiV2ConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ConfigurationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ConfigurationsKey(ctx context.Context, key PathConfigurationKey, params *GetApiV2ConfigurationsKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ConfigurationsKeyRequest(c.Server, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ConfigurationsKeyWithBody(ctx context.Context, key PathConfigurationKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ConfigurationsKeyRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2ConfigurationsKey(ctx context.Context, key PathConfigurationKey, body PutApiV2ConfigurationsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2ConfigurationsKeyRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2FeaturesStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2FeaturesStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2GcpSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2GcpSubscriptionsSubscriptionIdRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2IntegrationsAwsS3Buckets(ctx context.Context, params *GetApiV2IntegrationsAwsS3BucketsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2IntegrationsAwsS3BucketsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2IntegrationsAwsS3Objects(ctx context.Context, params *GetApiV2IntegrationsAwsS3ObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2IntegrationsAwsS3ObjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2IntegrationsAzureBlobStorageContainers(ctx context.Context, params *GetApiV2IntegrationsAzureBlobStorageContainersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2IntegrationsAzureBlobStorageContainersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2IntegrationsAzureBlobs(ctx context.Context, params *GetApiV2IntegrationsAzureBlobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2IntegrationsAzureBlobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Meta(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2MetaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2MetaCratedbVersions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2MetaCratedbVersionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2MetaIpAddress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2MetaIpAddressRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2MetaJwk(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2MetaJwkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2MetaJwtRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2MetaJwtRefreshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2MetaJwtRefresh(ctx context.Context, body PostApiV2MetaJwtRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2MetaJwtRefreshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Organizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2Organizations(ctx context.Context, body PostApiV2OrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2OrganizationsOrganizationId(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2OrganizationsOrganizationIdRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationId(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2OrganizationsOrganizationIdWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2OrganizationsOrganizationIdRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2OrganizationsOrganizationId(ctx context.Context, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2OrganizationsOrganizationIdRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdAuditlogs(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdAuditlogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdAuditlogsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdClusters(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdClustersRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdClustersWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdClustersRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdClusters(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdClustersRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonth(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdCredits(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdCreditsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdCreditsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdCreditsWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdCreditsRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdCredits(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdCreditsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdCreditsRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2OrganizationsOrganizationIdCreditsCreditId(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2OrganizationsOrganizationIdCreditsCreditIdRequest(c.Server, organizationId, creditId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithBody(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2OrganizationsOrganizationIdCreditsCreditIdRequestWithBody(c.Server, organizationId, creditId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2OrganizationsOrganizationIdCreditsCreditId(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, body PatchApiV2OrganizationsOrganizationIdCreditsCreditIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2OrganizationsOrganizationIdCreditsCreditIdRequest(c.Server, organizationId, creditId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdCustomer(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdCustomerRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2OrganizationsOrganizationIdCustomerWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2OrganizationsOrganizationIdCustomerRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2OrganizationsOrganizationIdCustomer(ctx context.Context, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2OrganizationsOrganizationIdCustomerRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdFiles(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdFilesRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdFilesWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdFilesRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdFiles(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdFilesRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2OrganizationsOrganizationIdFilesFileId(ctx context.Context, organizationId PathOrganizationId, fileId PathFileId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2OrganizationsOrganizationIdFilesFileIdRequest(c.Server, organizationId, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdFilesFileId(ctx context.Context, organizationId PathOrganizationId, fileId PathFileId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdFilesFileIdRequest(c.Server, organizationId, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdInvitations(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdInvitationsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2OrganizationsOrganizationIdInvitationsInviteToken(ctx context.Context, organizationId PathOrganizationId, inviteToken PathInviteToken, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenRequest(c.Server, organizationId, inviteToken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdMetricsPrometheus(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdMetricsPrometheusRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdPaymentMethods(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdPaymentMethodsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdProjects(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdProjectsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdQuotas(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdQuotasRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdRegions(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdRegionsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdRemainingBudget(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdRemainingBudgetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdRemainingBudgetRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdSecrets(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdSecretsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdSecretsWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdSecretsRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdSecrets(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdSecretsRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2OrganizationsOrganizationIdSecretsSecretId(ctx context.Context, organizationId PathOrganizationId, secretId PathOrganizationSecretId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2OrganizationsOrganizationIdSecretsSecretIdRequest(c.Server, organizationId, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdSubscriptions(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdSubscriptionsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdUsers(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdUsersRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdUsersWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdUsersRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2OrganizationsOrganizationIdUsers(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2OrganizationsOrganizationIdUsersRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmail(ctx context.Context, organizationId PathOrganizationId, userIdOrEmail PathUserIdOrEmail, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailRequest(c.Server, organizationId, userIdOrEmail)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Products(ctx context.Context, params *GetApiV2ProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ProductsClustersPrice(ctx context.Context, params *GetApiV2ProductsClustersPriceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ProductsClustersPriceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ProductsKind(ctx context.Context, kind PathProductKind, params *GetApiV2ProductsKindParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ProductsKindRequest(c.Server, kind, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ProjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2Projects(ctx context.Context, body PostApiV2ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ProjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2ProjectsProjectId(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2ProjectsProjectIdRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ProjectsProjectId(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ProjectsProjectIdRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2ProjectsProjectIdWithBody(ctx context.Context, projectId PathProjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2ProjectsProjectIdRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2ProjectsProjectId(ctx context.Context, projectId PathProjectId, body PatchApiV2ProjectsProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2ProjectsProjectIdRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ProjectsProjectIdClusters(ctx context.Context, projectId PathProjectId, params *GetApiV2ProjectsProjectIdClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ProjectsProjectIdClustersRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ProjectsProjectIdUsers(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ProjectsProjectIdUsersRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ProjectsProjectIdUsersWithBody(ctx context.Context, projectId PathProjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ProjectsProjectIdUsersRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ProjectsProjectIdUsers(ctx context.Context, projectId PathProjectId, body PostApiV2ProjectsProjectIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ProjectsProjectIdUsersRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2ProjectsProjectIdUsersUserIdOrEmail(ctx context.Context, projectId PathProjectId, userIdOrEmail PathUserIdOrEmail, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2ProjectsProjectIdUsersUserIdOrEmailRequest(c.Server, projectId, userIdOrEmail)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Regions(ctx context.Context, params *GetApiV2RegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2RegionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2RegionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2RegionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2Regions(ctx context.Context, body PostApiV2RegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2RegionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2RegionsRegionName(ctx context.Context, regionName PathRegionName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2RegionsRegionNameRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2RegionsRegionNameInstallToken(ctx context.Context, regionName PathRegionName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2RegionsRegionNameInstallTokenRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2RegionsRegionNameVerifyBackupLocationWithBody(ctx context.Context, regionName PathRegionName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2RegionsRegionNameVerifyBackupLocationRequestWithBody(c.Server, regionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2RegionsRegionNameVerifyBackupLocation(ctx context.Context, regionName PathRegionName, body PostApiV2RegionsRegionNameVerifyBackupLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2RegionsRegionNameVerifyBackupLocationRequest(c.Server, regionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Roles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2RolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2StripeBankTransferOrganizationsOrganizationIdSetup(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2StripeBankTransferOrganizationsOrganizationIdSetupRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2StripeCardOrganizationsOrganizationIdSetupPayment(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2StripeCardOrganizationsOrganizationIdSetup(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2StripeCardOrganizationsOrganizationIdSetupRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2StripeOrganizationsOrganizationIdBillingInformation(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2StripeOrganizationsOrganizationIdBillingInformationRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithBody(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2StripeOrganizationsOrganizationIdBillingInformationRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2StripeOrganizationsOrganizationIdBillingInformation(ctx context.Context, organizationId PathOrganizationId, body PatchApiV2StripeOrganizationsOrganizationIdBillingInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2StripeOrganizationsOrganizationIdBillingInformationRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2StripeOrganizationsOrganizationIdCards(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2StripeOrganizationsOrganizationIdCardsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2StripeOrganizationsOrganizationIdCardsCardId(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdRequest(c.Server, organizationId, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithBody(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2StripeOrganizationsOrganizationIdCardsCardIdRequestWithBody(c.Server, organizationId, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2StripeOrganizationsOrganizationIdCardsCardId(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, body PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2StripeOrganizationsOrganizationIdCardsCardIdRequest(c.Server, organizationId, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2StripeOrganizationsOrganizationIdSetupPayment(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2StripeOrganizationsOrganizationIdSetupPaymentRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2StripeOrganizationsOrganizationIdSetup(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2StripeOrganizationsOrganizationIdSetupRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2StripeOrganizationsOrganizationIdValidateCard(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2StripeOrganizationsOrganizationIdValidateCardRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2StripePromotions(ctx context.Context, params *GetApiV2StripePromotionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2StripePromotionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2StripeSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2StripeSubscriptionsSubscriptionIdRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2StripeSubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2StripeSubscriptionsSubscriptionIdRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2StripeSubscriptionsSubscriptionIdInvoices(ctx context.Context, subscriptionId PathSubscriptionId, params *GetApiV2StripeSubscriptionsSubscriptionIdInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2StripeSubscriptionsSubscriptionIdInvoicesRequest(c.Server, subscriptionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcoming(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Subscriptions(ctx context.Context, params *GetApiV2SubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2SubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2SubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2SubscriptionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2Subscriptions(ctx context.Context, body PostApiV2SubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2SubscriptionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2SubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2SubscriptionsSubscriptionIdRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2SubscriptionsSubscriptionId(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2SubscriptionsSubscriptionIdRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithBody(ctx context.Context, subscriptionId PathSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2SubscriptionsSubscriptionIdAssignOrgRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2SubscriptionsSubscriptionIdAssignOrg(ctx context.Context, subscriptionId PathSubscriptionId, body PatchApiV2SubscriptionsSubscriptionIdAssignOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2SubscriptionsSubscriptionIdAssignOrgRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2SubscriptionsSubscriptionIdWizardRedirect(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2SubscriptionsSubscriptionIdWizardRedirectRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Users(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2UsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2UsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2UsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2UsersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2UsersMeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2UsersMe(ctx context.Context, body PatchApiV2UsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2UsersMeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2UsersMeAcceptInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2UsersMeAcceptInviteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2UsersMeAcceptInvite(ctx context.Context, body PostApiV2UsersMeAcceptInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2UsersMeAcceptInviteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2UsersMeApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2UsersMeApiKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2UsersMeApiKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2UsersMeApiKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2UsersMeApiKeysApiKey(ctx context.Context, apiKey PathApiKey, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2UsersMeApiKeysApiKeyRequest(c.Server, apiKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2UsersMeApiKeysApiKey(ctx context.Context, apiKey PathApiKey, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2UsersMeApiKeysApiKeyRequest(c.Server, apiKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2UsersMeApiKeysApiKeyWithBody(ctx context.Context, apiKey PathApiKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2UsersMeApiKeysApiKeyRequestWithBody(c.Server, apiKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2UsersMeApiKeysApiKey(ctx context.Context, apiKey PathApiKey, body PatchApiV2UsersMeApiKeysApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2UsersMeApiKeysApiKeyRequest(c.Server, apiKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2UsersMeConfirmEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2UsersMeConfirmEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2UsersMeConfirmEmail(ctx context.Context, body PutApiV2UsersMeConfirmEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2UsersMeConfirmEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2UsersUserId(ctx context.Context, userId PathUserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2UsersUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV2AwsSubscriptionsSubscriptionIdRequest generates requests for GetApiV2AwsSubscriptionsSubscriptionId
func NewGetApiV2AwsSubscriptionsSubscriptionIdRequest(server string, subscriptionId PathSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aws/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2AwsSubscriptionsSubscriptionIdRequest calls the generic PatchApiV2AwsSubscriptionsSubscriptionId builder with application/json body
func NewPatchApiV2AwsSubscriptionsSubscriptionIdRequest(server string, subscriptionId PathSubscriptionId, body PatchApiV2AwsSubscriptionsSubscriptionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2AwsSubscriptionsSubscriptionIdRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewPatchApiV2AwsSubscriptionsSubscriptionIdRequestWithBody generates requests for PatchApiV2AwsSubscriptionsSubscriptionId with any type of body
func NewPatchApiV2AwsSubscriptionsSubscriptionIdRequestWithBody(server string, subscriptionId PathSubscriptionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/aws/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2AzureSubscriptionsSubscriptionIdRequest generates requests for GetApiV2AzureSubscriptionsSubscriptionId
func NewGetApiV2AzureSubscriptionsSubscriptionIdRequest(server string, subscriptionId PathSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/azure/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ClustersRequest generates requests for GetApiV2Clusters
func NewGetApiV2ClustersRequest(server string, params *GetApiV2ClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SubscriptionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscription_id", runtime.ParamLocationQuery, *params.SubscriptionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name", runtime.ParamLocationQuery, *params.ProductName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadApiV2ClustersNameNameRequest generates requests for HeadApiV2ClustersNameName
func NewHeadApiV2ClustersNameNameRequest(server string, name PathName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/name/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2ClustersClusterIdRequest generates requests for DeleteApiV2ClustersClusterId
func NewDeleteApiV2ClustersClusterIdRequest(server string, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ClustersClusterIdRequest generates requests for GetApiV2ClustersClusterId
func NewGetApiV2ClustersClusterIdRequest(server string, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2ClustersClusterIdRequest calls the generic PatchApiV2ClustersClusterId builder with application/json body
func NewPatchApiV2ClustersClusterIdRequest(server string, clusterId PathClusterId, body PatchApiV2ClustersClusterIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2ClustersClusterIdRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPatchApiV2ClustersClusterIdRequestWithBody generates requests for PatchApiV2ClustersClusterId with any type of body
func NewPatchApiV2ClustersClusterIdRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2ClustersClusterIdAvailableProductsRequest generates requests for GetApiV2ClustersClusterIdAvailableProducts
func NewGetApiV2ClustersClusterIdAvailableProductsRequest(server string, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/available-products/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ClustersClusterIdAvailableUpgradesRequest generates requests for GetApiV2ClustersClusterIdAvailableUpgrades
func NewGetApiV2ClustersClusterIdAvailableUpgradesRequest(server string, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/available-upgrades/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV2ClustersClusterIdBackupScheduleRequest calls the generic PutApiV2ClustersClusterIdBackupSchedule builder with application/json body
func NewPutApiV2ClustersClusterIdBackupScheduleRequest(server string, clusterId PathClusterId, body PutApiV2ClustersClusterIdBackupScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2ClustersClusterIdBackupScheduleRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPutApiV2ClustersClusterIdBackupScheduleRequestWithBody generates requests for PutApiV2ClustersClusterIdBackupSchedule with any type of body
func NewPutApiV2ClustersClusterIdBackupScheduleRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/backup-schedule/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV2ClustersClusterIdDeletionProtectionRequest calls the generic PutApiV2ClustersClusterIdDeletionProtection builder with application/json body
func NewPutApiV2ClustersClusterIdDeletionProtectionRequest(server string, clusterId PathClusterId, body PutApiV2ClustersClusterIdDeletionProtectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2ClustersClusterIdDeletionProtectionRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPutApiV2ClustersClusterIdDeletionProtectionRequestWithBody generates requests for PutApiV2ClustersClusterIdDeletionProtection with any type of body
func NewPutApiV2ClustersClusterIdDeletionProtectionRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/deletion-protection/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2ClustersClusterIdExportJobsRequest generates requests for GetApiV2ClustersClusterIdExportJobs
func NewGetApiV2ClustersClusterIdExportJobsRequest(server string, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/export-jobs/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2ClustersClusterIdExportJobsRequest calls the generic PostApiV2ClustersClusterIdExportJobs builder with application/json body
func NewPostApiV2ClustersClusterIdExportJobsRequest(server string, clusterId PathClusterId, body PostApiV2ClustersClusterIdExportJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2ClustersClusterIdExportJobsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPostApiV2ClustersClusterIdExportJobsRequestWithBody generates requests for PostApiV2ClustersClusterIdExportJobs with any type of body
func NewPostApiV2ClustersClusterIdExportJobsRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/export-jobs/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2ClustersClusterIdExportJobsExportJobIdRequest generates requests for DeleteApiV2ClustersClusterIdExportJobsExportJobId
func NewDeleteApiV2ClustersClusterIdExportJobsExportJobIdRequest(server string, clusterId PathClusterId, exportJobId PathExportJobId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "export_job_id", runtime.ParamLocationPath, exportJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/export-jobs/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ClustersClusterIdExportJobsExportJobIdRequest generates requests for GetApiV2ClustersClusterIdExportJobsExportJobId
func NewGetApiV2ClustersClusterIdExportJobsExportJobIdRequest(server string, clusterId PathClusterId, exportJobId PathExportJobId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "export_job_id", runtime.ParamLocationPath, exportJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/export-jobs/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ClustersClusterIdImportJobsRequest generates requests for GetApiV2ClustersClusterIdImportJobs
func NewGetApiV2ClustersClusterIdImportJobsRequest(server string, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/import-jobs/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2ClustersClusterIdImportJobsRequest calls the generic PostApiV2ClustersClusterIdImportJobs builder with application/json body
func NewPostApiV2ClustersClusterIdImportJobsRequest(server string, clusterId PathClusterId, body PostApiV2ClustersClusterIdImportJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2ClustersClusterIdImportJobsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPostApiV2ClustersClusterIdImportJobsRequestWithBody generates requests for PostApiV2ClustersClusterIdImportJobs with any type of body
func NewPostApiV2ClustersClusterIdImportJobsRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/import-jobs/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2ClustersClusterIdImportJobsImportJobIdRequest generates requests for DeleteApiV2ClustersClusterIdImportJobsImportJobId
func NewDeleteApiV2ClustersClusterIdImportJobsImportJobIdRequest(server string, clusterId PathClusterId, importJobId PathImportJobId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "import_job_id", runtime.ParamLocationPath, importJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/import-jobs/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ClustersClusterIdImportJobsImportJobIdRequest generates requests for GetApiV2ClustersClusterIdImportJobsImportJobId
func NewGetApiV2ClustersClusterIdImportJobsImportJobIdRequest(server string, clusterId PathClusterId, importJobId PathImportJobId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "import_job_id", runtime.ParamLocationPath, importJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/import-jobs/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ClustersClusterIdImportJobsImportJobIdProgressRequest generates requests for GetApiV2ClustersClusterIdImportJobsImportJobIdProgress
func NewGetApiV2ClustersClusterIdImportJobsImportJobIdProgressRequest(server string, clusterId PathClusterId, importJobId PathImportJobId, params *GetApiV2ClustersClusterIdImportJobsImportJobIdProgressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "import_job_id", runtime.ParamLocationPath, importJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/import-jobs/%s/progress/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV2ClustersClusterIdIpRestrictionsRequest calls the generic PutApiV2ClustersClusterIdIpRestrictions builder with application/json body
func NewPutApiV2ClustersClusterIdIpRestrictionsRequest(server string, clusterId PathClusterId, body PutApiV2ClustersClusterIdIpRestrictionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2ClustersClusterIdIpRestrictionsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPutApiV2ClustersClusterIdIpRestrictionsRequestWithBody generates requests for PutApiV2ClustersClusterIdIpRestrictions with any type of body
func NewPutApiV2ClustersClusterIdIpRestrictionsRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/ip-restrictions/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2ClustersClusterIdJwtRequest generates requests for GetApiV2ClustersClusterIdJwt
func NewGetApiV2ClustersClusterIdJwtRequest(server string, clusterId PathClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/jwt/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ClustersClusterIdMetricsMetricIdRequest generates requests for GetApiV2ClustersClusterIdMetricsMetricId
func NewGetApiV2ClustersClusterIdMetricsMetricIdRequest(server string, clusterId PathClusterId, metricId GetApiV2ClustersClusterIdMetricsMetricIdParamsMetricId, params *GetApiV2ClustersClusterIdMetricsMetricIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metric_id", runtime.ParamLocationPath, metricId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/metrics/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinutesAgo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minutes_ago", runtime.ParamLocationQuery, *params.MinutesAgo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2ClustersClusterIdNodesOrdinalRequest generates requests for DeleteApiV2ClustersClusterIdNodesOrdinal
func NewDeleteApiV2ClustersClusterIdNodesOrdinalRequest(server string, clusterId PathClusterId, ordinal PathOrdinal) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ordinal", runtime.ParamLocationPath, ordinal)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ClustersClusterIdOperationsRequest generates requests for GetApiV2ClustersClusterIdOperations
func NewGetApiV2ClustersClusterIdOperationsRequest(server string, clusterId PathClusterId, params *GetApiV2ClustersClusterIdOperationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/operations/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV2ClustersClusterIdProductRequest calls the generic PutApiV2ClustersClusterIdProduct builder with application/json body
func NewPutApiV2ClustersClusterIdProductRequest(server string, clusterId PathClusterId, body PutApiV2ClustersClusterIdProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2ClustersClusterIdProductRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPutApiV2ClustersClusterIdProductRequestWithBody generates requests for PutApiV2ClustersClusterIdProduct with any type of body
func NewPutApiV2ClustersClusterIdProductRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/product/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV2ClustersClusterIdScaleRequest calls the generic PutApiV2ClustersClusterIdScale builder with application/json body
func NewPutApiV2ClustersClusterIdScaleRequest(server string, clusterId PathClusterId, body PutApiV2ClustersClusterIdScaleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2ClustersClusterIdScaleRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPutApiV2ClustersClusterIdScaleRequestWithBody generates requests for PutApiV2ClustersClusterIdScale with any type of body
func NewPutApiV2ClustersClusterIdScaleRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/scale/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2ClustersClusterIdSnapshotsRequest generates requests for GetApiV2ClustersClusterIdSnapshots
func NewGetApiV2ClustersClusterIdSnapshotsRequest(server string, clusterId PathClusterId, params *GetApiV2ClustersClusterIdSnapshotsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/snapshots/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2ClustersClusterIdSnapshotsRestoreRequest calls the generic PostApiV2ClustersClusterIdSnapshotsRestore builder with application/json body
func NewPostApiV2ClustersClusterIdSnapshotsRestoreRequest(server string, clusterId PathTargetClusterId, body PostApiV2ClustersClusterIdSnapshotsRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2ClustersClusterIdSnapshotsRestoreRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPostApiV2ClustersClusterIdSnapshotsRestoreRequestWithBody generates requests for PostApiV2ClustersClusterIdSnapshotsRestore with any type of body
func NewPostApiV2ClustersClusterIdSnapshotsRestoreRequestWithBody(server string, clusterId PathTargetClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/snapshots/restore/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV2ClustersClusterIdStorageRequest calls the generic PutApiV2ClustersClusterIdStorage builder with application/json body
func NewPutApiV2ClustersClusterIdStorageRequest(server string, clusterId PathClusterId, body PutApiV2ClustersClusterIdStorageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2ClustersClusterIdStorageRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPutApiV2ClustersClusterIdStorageRequestWithBody generates requests for PutApiV2ClustersClusterIdStorage with any type of body
func NewPutApiV2ClustersClusterIdStorageRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/storage/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV2ClustersClusterIdSuspendRequest calls the generic PutApiV2ClustersClusterIdSuspend builder with application/json body
func NewPutApiV2ClustersClusterIdSuspendRequest(server string, clusterId PathClusterId, body PutApiV2ClustersClusterIdSuspendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2ClustersClusterIdSuspendRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPutApiV2ClustersClusterIdSuspendRequestWithBody generates requests for PutApiV2ClustersClusterIdSuspend with any type of body
func NewPutApiV2ClustersClusterIdSuspendRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/suspend/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV2ClustersClusterIdUpgradeRequest calls the generic PutApiV2ClustersClusterIdUpgrade builder with application/json body
func NewPutApiV2ClustersClusterIdUpgradeRequest(server string, clusterId PathClusterId, body PutApiV2ClustersClusterIdUpgradeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2ClustersClusterIdUpgradeRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPutApiV2ClustersClusterIdUpgradeRequestWithBody generates requests for PutApiV2ClustersClusterIdUpgrade with any type of body
func NewPutApiV2ClustersClusterIdUpgradeRequestWithBody(server string, clusterId PathClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/clusters/%s/upgrade/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2ConfigurationsRequest generates requests for GetApiV2Configurations
func NewGetApiV2ConfigurationsRequest(server string, params *GetApiV2ConfigurationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/configurations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ConfigurationsKeyRequest generates requests for GetApiV2ConfigurationsKey
func NewGetApiV2ConfigurationsKeyRequest(server string, key PathConfigurationKey, params *GetApiV2ConfigurationsKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV2ConfigurationsKeyRequest calls the generic PutApiV2ConfigurationsKey builder with application/json body
func NewPutApiV2ConfigurationsKeyRequest(server string, key PathConfigurationKey, body PutApiV2ConfigurationsKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2ConfigurationsKeyRequestWithBody(server, key, "application/json", bodyReader)
}

// NewPutApiV2ConfigurationsKeyRequestWithBody generates requests for PutApiV2ConfigurationsKey with any type of body
func NewPutApiV2ConfigurationsKeyRequestWithBody(server string, key PathConfigurationKey, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/configurations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2FeaturesStatusRequest generates requests for GetApiV2FeaturesStatus
func NewGetApiV2FeaturesStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/features/status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2GcpSubscriptionsSubscriptionIdRequest generates requests for GetApiV2GcpSubscriptionsSubscriptionId
func NewGetApiV2GcpSubscriptionsSubscriptionIdRequest(server string, subscriptionId PathSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/gcp/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2IntegrationsAwsS3BucketsRequest generates requests for GetApiV2IntegrationsAwsS3Buckets
func NewGetApiV2IntegrationsAwsS3BucketsRequest(server string, params *GetApiV2IntegrationsAwsS3BucketsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/integrations/aws/s3-buckets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_id", runtime.ParamLocationQuery, params.SecretId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Endpoint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint", runtime.ParamLocationQuery, *params.Endpoint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2IntegrationsAwsS3ObjectsRequest generates requests for GetApiV2IntegrationsAwsS3Objects
func NewGetApiV2IntegrationsAwsS3ObjectsRequest(server string, params *GetApiV2IntegrationsAwsS3ObjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/integrations/aws/s3-objects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_id", runtime.ParamLocationQuery, params.SecretId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Endpoint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint", runtime.ParamLocationQuery, *params.Endpoint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bucket", runtime.ParamLocationQuery, params.Bucket); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2IntegrationsAzureBlobStorageContainersRequest generates requests for GetApiV2IntegrationsAzureBlobStorageContainers
func NewGetApiV2IntegrationsAzureBlobStorageContainersRequest(server string, params *GetApiV2IntegrationsAzureBlobStorageContainersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/integrations/azure/blob-storage-containers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_id", runtime.ParamLocationQuery, params.SecretId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2IntegrationsAzureBlobsRequest generates requests for GetApiV2IntegrationsAzureBlobs
func NewGetApiV2IntegrationsAzureBlobsRequest(server string, params *GetApiV2IntegrationsAzureBlobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/integrations/azure/blobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "secret_id", runtime.ParamLocationQuery, params.SecretId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "container_name", runtime.ParamLocationQuery, params.ContainerName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2MetaRequest generates requests for GetApiV2Meta
func NewGetApiV2MetaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/meta/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2MetaCratedbVersionsRequest generates requests for GetApiV2MetaCratedbVersions
func NewGetApiV2MetaCratedbVersionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/meta/cratedb-versions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2MetaIpAddressRequest generates requests for GetApiV2MetaIpAddress
func NewGetApiV2MetaIpAddressRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/meta/ip-address/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2MetaJwkRequest generates requests for GetApiV2MetaJwk
func NewGetApiV2MetaJwkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/meta/jwk/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2MetaJwtRefreshRequest calls the generic PostApiV2MetaJwtRefresh builder with application/json body
func NewPostApiV2MetaJwtRefreshRequest(server string, body PostApiV2MetaJwtRefreshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2MetaJwtRefreshRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2MetaJwtRefreshRequestWithBody generates requests for PostApiV2MetaJwtRefresh with any type of body
func NewPostApiV2MetaJwtRefreshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/meta/jwt/refresh/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2OrganizationsRequest generates requests for GetApiV2Organizations
func NewGetApiV2OrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2OrganizationsRequest calls the generic PostApiV2Organizations builder with application/json body
func NewPostApiV2OrganizationsRequest(server string, body PostApiV2OrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2OrganizationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2OrganizationsRequestWithBody generates requests for PostApiV2Organizations with any type of body
func NewPostApiV2OrganizationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2OrganizationsOrganizationIdRequest generates requests for DeleteApiV2OrganizationsOrganizationId
func NewDeleteApiV2OrganizationsOrganizationIdRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdRequest generates requests for GetApiV2OrganizationsOrganizationId
func NewGetApiV2OrganizationsOrganizationIdRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV2OrganizationsOrganizationIdRequest calls the generic PutApiV2OrganizationsOrganizationId builder with application/json body
func NewPutApiV2OrganizationsOrganizationIdRequest(server string, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2OrganizationsOrganizationIdRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPutApiV2OrganizationsOrganizationIdRequestWithBody generates requests for PutApiV2OrganizationsOrganizationId with any type of body
func NewPutApiV2OrganizationsOrganizationIdRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdAuditlogsRequest generates requests for GetApiV2OrganizationsOrganizationIdAuditlogs
func NewGetApiV2OrganizationsOrganizationIdAuditlogsRequest(server string, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdAuditlogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/auditlogs/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster_id", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Last != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, *params.Last); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdClustersRequest generates requests for GetApiV2OrganizationsOrganizationIdClusters
func NewGetApiV2OrganizationsOrganizationIdClustersRequest(server string, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdClustersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/clusters/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SubscriptionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscription_id", runtime.ParamLocationQuery, *params.SubscriptionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name", runtime.ParamLocationQuery, *params.ProductName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2OrganizationsOrganizationIdClustersRequest calls the generic PostApiV2OrganizationsOrganizationIdClusters builder with application/json body
func NewPostApiV2OrganizationsOrganizationIdClustersRequest(server string, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2OrganizationsOrganizationIdClustersRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPostApiV2OrganizationsOrganizationIdClustersRequestWithBody generates requests for PostApiV2OrganizationsOrganizationIdClusters with any type of body
func NewPostApiV2OrganizationsOrganizationIdClustersRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/clusters/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthRequest generates requests for GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonth
func NewGetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/consumption/current-month/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdCreditsRequest generates requests for GetApiV2OrganizationsOrganizationIdCredits
func NewGetApiV2OrganizationsOrganizationIdCreditsRequest(server string, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdCreditsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/credits/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2OrganizationsOrganizationIdCreditsRequest calls the generic PostApiV2OrganizationsOrganizationIdCredits builder with application/json body
func NewPostApiV2OrganizationsOrganizationIdCreditsRequest(server string, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdCreditsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2OrganizationsOrganizationIdCreditsRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPostApiV2OrganizationsOrganizationIdCreditsRequestWithBody generates requests for PostApiV2OrganizationsOrganizationIdCredits with any type of body
func NewPostApiV2OrganizationsOrganizationIdCreditsRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/credits/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2OrganizationsOrganizationIdCreditsCreditIdRequest generates requests for DeleteApiV2OrganizationsOrganizationIdCreditsCreditId
func NewDeleteApiV2OrganizationsOrganizationIdCreditsCreditIdRequest(server string, organizationId PathOrganizationId, creditId PathCreditId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "credit_id", runtime.ParamLocationPath, creditId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/credits/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2OrganizationsOrganizationIdCreditsCreditIdRequest calls the generic PatchApiV2OrganizationsOrganizationIdCreditsCreditId builder with application/json body
func NewPatchApiV2OrganizationsOrganizationIdCreditsCreditIdRequest(server string, organizationId PathOrganizationId, creditId PathCreditId, body PatchApiV2OrganizationsOrganizationIdCreditsCreditIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2OrganizationsOrganizationIdCreditsCreditIdRequestWithBody(server, organizationId, creditId, "application/json", bodyReader)
}

// NewPatchApiV2OrganizationsOrganizationIdCreditsCreditIdRequestWithBody generates requests for PatchApiV2OrganizationsOrganizationIdCreditsCreditId with any type of body
func NewPatchApiV2OrganizationsOrganizationIdCreditsCreditIdRequestWithBody(server string, organizationId PathOrganizationId, creditId PathCreditId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "credit_id", runtime.ParamLocationPath, creditId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/credits/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdCustomerRequest generates requests for GetApiV2OrganizationsOrganizationIdCustomer
func NewGetApiV2OrganizationsOrganizationIdCustomerRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/customer/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV2OrganizationsOrganizationIdCustomerRequest calls the generic PutApiV2OrganizationsOrganizationIdCustomer builder with application/json body
func NewPutApiV2OrganizationsOrganizationIdCustomerRequest(server string, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2OrganizationsOrganizationIdCustomerRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPutApiV2OrganizationsOrganizationIdCustomerRequestWithBody generates requests for PutApiV2OrganizationsOrganizationIdCustomer with any type of body
func NewPutApiV2OrganizationsOrganizationIdCustomerRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/customer/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdFilesRequest generates requests for GetApiV2OrganizationsOrganizationIdFiles
func NewGetApiV2OrganizationsOrganizationIdFilesRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2OrganizationsOrganizationIdFilesRequest calls the generic PostApiV2OrganizationsOrganizationIdFiles builder with application/json body
func NewPostApiV2OrganizationsOrganizationIdFilesRequest(server string, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdFilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2OrganizationsOrganizationIdFilesRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPostApiV2OrganizationsOrganizationIdFilesRequestWithBody generates requests for PostApiV2OrganizationsOrganizationIdFiles with any type of body
func NewPostApiV2OrganizationsOrganizationIdFilesRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/files/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2OrganizationsOrganizationIdFilesFileIdRequest generates requests for DeleteApiV2OrganizationsOrganizationIdFilesFileId
func NewDeleteApiV2OrganizationsOrganizationIdFilesFileIdRequest(server string, organizationId PathOrganizationId, fileId PathFileId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/files/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdFilesFileIdRequest generates requests for GetApiV2OrganizationsOrganizationIdFilesFileId
func NewGetApiV2OrganizationsOrganizationIdFilesFileIdRequest(server string, organizationId PathOrganizationId, fileId PathFileId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/files/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdInvitationsRequest generates requests for GetApiV2OrganizationsOrganizationIdInvitations
func NewGetApiV2OrganizationsOrganizationIdInvitationsRequest(server string, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdInvitationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/invitations/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenRequest generates requests for DeleteApiV2OrganizationsOrganizationIdInvitationsInviteToken
func NewDeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenRequest(server string, organizationId PathOrganizationId, inviteToken PathInviteToken) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invite_token", runtime.ParamLocationPath, inviteToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/invitations/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdMetricsPrometheusRequest generates requests for GetApiV2OrganizationsOrganizationIdMetricsPrometheus
func NewGetApiV2OrganizationsOrganizationIdMetricsPrometheusRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/metrics/prometheus/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdPaymentMethodsRequest generates requests for GetApiV2OrganizationsOrganizationIdPaymentMethods
func NewGetApiV2OrganizationsOrganizationIdPaymentMethodsRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/payment-methods/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdProjectsRequest generates requests for GetApiV2OrganizationsOrganizationIdProjects
func NewGetApiV2OrganizationsOrganizationIdProjectsRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/projects/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdQuotasRequest generates requests for GetApiV2OrganizationsOrganizationIdQuotas
func NewGetApiV2OrganizationsOrganizationIdQuotasRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/quotas/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdRegionsRequest generates requests for GetApiV2OrganizationsOrganizationIdRegions
func NewGetApiV2OrganizationsOrganizationIdRegionsRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/regions/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdRemainingBudgetRequest generates requests for GetApiV2OrganizationsOrganizationIdRemainingBudget
func NewGetApiV2OrganizationsOrganizationIdRemainingBudgetRequest(server string, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdRemainingBudgetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/remaining-budget/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExcludeClusterId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_cluster_id", runtime.ParamLocationQuery, *params.ExcludeClusterId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdSecretsRequest generates requests for GetApiV2OrganizationsOrganizationIdSecrets
func NewGetApiV2OrganizationsOrganizationIdSecretsRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/secrets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2OrganizationsOrganizationIdSecretsRequest calls the generic PostApiV2OrganizationsOrganizationIdSecrets builder with application/json body
func NewPostApiV2OrganizationsOrganizationIdSecretsRequest(server string, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2OrganizationsOrganizationIdSecretsRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPostApiV2OrganizationsOrganizationIdSecretsRequestWithBody generates requests for PostApiV2OrganizationsOrganizationIdSecrets with any type of body
func NewPostApiV2OrganizationsOrganizationIdSecretsRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/secrets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2OrganizationsOrganizationIdSecretsSecretIdRequest generates requests for DeleteApiV2OrganizationsOrganizationIdSecretsSecretId
func NewDeleteApiV2OrganizationsOrganizationIdSecretsSecretIdRequest(server string, organizationId PathOrganizationId, secretId PathOrganizationSecretId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/secrets/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdSubscriptionsRequest generates requests for GetApiV2OrganizationsOrganizationIdSubscriptions
func NewGetApiV2OrganizationsOrganizationIdSubscriptionsRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/subscriptions/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdUsersRequest generates requests for GetApiV2OrganizationsOrganizationIdUsers
func NewGetApiV2OrganizationsOrganizationIdUsersRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/users/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2OrganizationsOrganizationIdUsersRequest calls the generic PostApiV2OrganizationsOrganizationIdUsers builder with application/json body
func NewPostApiV2OrganizationsOrganizationIdUsersRequest(server string, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2OrganizationsOrganizationIdUsersRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPostApiV2OrganizationsOrganizationIdUsersRequestWithBody generates requests for PostApiV2OrganizationsOrganizationIdUsers with any type of body
func NewPostApiV2OrganizationsOrganizationIdUsersRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/users/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailRequest generates requests for DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmail
func NewDeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailRequest(server string, organizationId PathOrganizationId, userIdOrEmail PathUserIdOrEmail) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id_or_email", runtime.ParamLocationPath, userIdOrEmail)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/users/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ProductsRequest generates requests for GetApiV2Products
func NewGetApiV2ProductsRequest(server string, params *GetApiV2ProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Tier != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tier", runtime.ParamLocationQuery, *params.Tier); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Plan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan", runtime.ParamLocationQuery, *params.Plan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer", runtime.ParamLocationQuery, *params.Offer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ProductsClustersPriceRequest generates requests for GetApiV2ProductsClustersPrice
func NewGetApiV2ProductsClustersPriceRequest(server string, params *GetApiV2ProductsClustersPriceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/clusters/price")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ProductPlan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_plan", runtime.ParamLocationQuery, *params.ProductPlan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductOffer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_offer", runtime.ParamLocationQuery, *params.ProductOffer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name", runtime.ParamLocationQuery, params.ProductName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_tier", runtime.ParamLocationQuery, params.ProductTier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_unit", runtime.ParamLocationQuery, params.ProductUnit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.StorageBytes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storage_bytes", runtime.ParamLocationQuery, *params.StorageBytes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ProductsKindRequest generates requests for GetApiV2ProductsKind
func NewGetApiV2ProductsKindRequest(server string, kind PathProductKind, params *GetApiV2ProductsKindParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "kind", runtime.ParamLocationPath, kind)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/products/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Tier != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tier", runtime.ParamLocationQuery, *params.Tier); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Plan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "plan", runtime.ParamLocationQuery, *params.Plan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offer", runtime.ParamLocationQuery, *params.Offer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ProjectsRequest generates requests for GetApiV2Projects
func NewGetApiV2ProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2ProjectsRequest calls the generic PostApiV2Projects builder with application/json body
func NewPostApiV2ProjectsRequest(server string, body PostApiV2ProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2ProjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2ProjectsRequestWithBody generates requests for PostApiV2Projects with any type of body
func NewPostApiV2ProjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2ProjectsProjectIdRequest generates requests for DeleteApiV2ProjectsProjectId
func NewDeleteApiV2ProjectsProjectIdRequest(server string, projectId PathProjectId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ProjectsProjectIdRequest generates requests for GetApiV2ProjectsProjectId
func NewGetApiV2ProjectsProjectIdRequest(server string, projectId PathProjectId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2ProjectsProjectIdRequest calls the generic PatchApiV2ProjectsProjectId builder with application/json body
func NewPatchApiV2ProjectsProjectIdRequest(server string, projectId PathProjectId, body PatchApiV2ProjectsProjectIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2ProjectsProjectIdRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPatchApiV2ProjectsProjectIdRequestWithBody generates requests for PatchApiV2ProjectsProjectId with any type of body
func NewPatchApiV2ProjectsProjectIdRequestWithBody(server string, projectId PathProjectId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/projects/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2ProjectsProjectIdClustersRequest generates requests for GetApiV2ProjectsProjectIdClusters
func NewGetApiV2ProjectsProjectIdClustersRequest(server string, projectId PathProjectId, params *GetApiV2ProjectsProjectIdClustersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/projects/%s/clusters/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SubscriptionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subscription_id", runtime.ParamLocationQuery, *params.SubscriptionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name", runtime.ParamLocationQuery, *params.ProductName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ProjectsProjectIdUsersRequest generates requests for GetApiV2ProjectsProjectIdUsers
func NewGetApiV2ProjectsProjectIdUsersRequest(server string, projectId PathProjectId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/projects/%s/users/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2ProjectsProjectIdUsersRequest calls the generic PostApiV2ProjectsProjectIdUsers builder with application/json body
func NewPostApiV2ProjectsProjectIdUsersRequest(server string, projectId PathProjectId, body PostApiV2ProjectsProjectIdUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2ProjectsProjectIdUsersRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPostApiV2ProjectsProjectIdUsersRequestWithBody generates requests for PostApiV2ProjectsProjectIdUsers with any type of body
func NewPostApiV2ProjectsProjectIdUsersRequestWithBody(server string, projectId PathProjectId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/projects/%s/users/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2ProjectsProjectIdUsersUserIdOrEmailRequest generates requests for DeleteApiV2ProjectsProjectIdUsersUserIdOrEmail
func NewDeleteApiV2ProjectsProjectIdUsersUserIdOrEmailRequest(server string, projectId PathProjectId, userIdOrEmail PathUserIdOrEmail) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id_or_email", runtime.ParamLocationPath, userIdOrEmail)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/projects/%s/users/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2RegionsRequest generates requests for GetApiV2Regions
func NewGetApiV2RegionsRequest(server string, params *GetApiV2RegionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2RegionsRequest calls the generic PostApiV2Regions builder with application/json body
func NewPostApiV2RegionsRequest(server string, body PostApiV2RegionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2RegionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2RegionsRequestWithBody generates requests for PostApiV2Regions with any type of body
func NewPostApiV2RegionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2RegionsRegionNameRequest generates requests for DeleteApiV2RegionsRegionName
func NewDeleteApiV2RegionsRegionNameRequest(server string, regionName PathRegionName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region_name", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2RegionsRegionNameInstallTokenRequest generates requests for GetApiV2RegionsRegionNameInstallToken
func NewGetApiV2RegionsRegionNameInstallTokenRequest(server string, regionName PathRegionName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region_name", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regions/%s/install-token/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2RegionsRegionNameVerifyBackupLocationRequest calls the generic PostApiV2RegionsRegionNameVerifyBackupLocation builder with application/json body
func NewPostApiV2RegionsRegionNameVerifyBackupLocationRequest(server string, regionName PathRegionName, body PostApiV2RegionsRegionNameVerifyBackupLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2RegionsRegionNameVerifyBackupLocationRequestWithBody(server, regionName, "application/json", bodyReader)
}

// NewPostApiV2RegionsRegionNameVerifyBackupLocationRequestWithBody generates requests for PostApiV2RegionsRegionNameVerifyBackupLocation with any type of body
func NewPostApiV2RegionsRegionNameVerifyBackupLocationRequestWithBody(server string, regionName PathRegionName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "region_name", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/regions/%s/verify-backup-location/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2RolesRequest generates requests for GetApiV2Roles
func NewGetApiV2RolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/roles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2StripeBankTransferOrganizationsOrganizationIdSetupRequest generates requests for PostApiV2StripeBankTransferOrganizationsOrganizationIdSetup
func NewPostApiV2StripeBankTransferOrganizationsOrganizationIdSetupRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/bank-transfer/organizations/%s/setup/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentRequest generates requests for PostApiV2StripeCardOrganizationsOrganizationIdSetupPayment
func NewPostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/card/organizations/%s/setup-payment/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2StripeCardOrganizationsOrganizationIdSetupRequest generates requests for PostApiV2StripeCardOrganizationsOrganizationIdSetup
func NewPostApiV2StripeCardOrganizationsOrganizationIdSetupRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/card/organizations/%s/setup/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2StripeOrganizationsOrganizationIdBillingInformationRequest generates requests for GetApiV2StripeOrganizationsOrganizationIdBillingInformation
func NewGetApiV2StripeOrganizationsOrganizationIdBillingInformationRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/organizations/%s/billing-information/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2StripeOrganizationsOrganizationIdBillingInformationRequest calls the generic PatchApiV2StripeOrganizationsOrganizationIdBillingInformation builder with application/json body
func NewPatchApiV2StripeOrganizationsOrganizationIdBillingInformationRequest(server string, organizationId PathOrganizationId, body PatchApiV2StripeOrganizationsOrganizationIdBillingInformationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2StripeOrganizationsOrganizationIdBillingInformationRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPatchApiV2StripeOrganizationsOrganizationIdBillingInformationRequestWithBody generates requests for PatchApiV2StripeOrganizationsOrganizationIdBillingInformation with any type of body
func NewPatchApiV2StripeOrganizationsOrganizationIdBillingInformationRequestWithBody(server string, organizationId PathOrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/organizations/%s/billing-information/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2StripeOrganizationsOrganizationIdCardsRequest generates requests for GetApiV2StripeOrganizationsOrganizationIdCards
func NewGetApiV2StripeOrganizationsOrganizationIdCardsRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/organizations/%s/cards/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdRequest generates requests for DeleteApiV2StripeOrganizationsOrganizationIdCardsCardId
func NewDeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdRequest(server string, organizationId PathOrganizationId, cardId PathCardId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/organizations/%s/cards/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2StripeOrganizationsOrganizationIdCardsCardIdRequest calls the generic PatchApiV2StripeOrganizationsOrganizationIdCardsCardId builder with application/json body
func NewPatchApiV2StripeOrganizationsOrganizationIdCardsCardIdRequest(server string, organizationId PathOrganizationId, cardId PathCardId, body PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2StripeOrganizationsOrganizationIdCardsCardIdRequestWithBody(server, organizationId, cardId, "application/json", bodyReader)
}

// NewPatchApiV2StripeOrganizationsOrganizationIdCardsCardIdRequestWithBody generates requests for PatchApiV2StripeOrganizationsOrganizationIdCardsCardId with any type of body
func NewPatchApiV2StripeOrganizationsOrganizationIdCardsCardIdRequestWithBody(server string, organizationId PathOrganizationId, cardId PathCardId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "card_id", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/organizations/%s/cards/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2StripeOrganizationsOrganizationIdSetupPaymentRequest generates requests for PostApiV2StripeOrganizationsOrganizationIdSetupPayment
func NewPostApiV2StripeOrganizationsOrganizationIdSetupPaymentRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/organizations/%s/setup-payment/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2StripeOrganizationsOrganizationIdSetupRequest generates requests for PostApiV2StripeOrganizationsOrganizationIdSetup
func NewPostApiV2StripeOrganizationsOrganizationIdSetupRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/organizations/%s/setup/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2StripeOrganizationsOrganizationIdValidateCardRequest generates requests for PostApiV2StripeOrganizationsOrganizationIdValidateCard
func NewPostApiV2StripeOrganizationsOrganizationIdValidateCardRequest(server string, organizationId PathOrganizationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/organizations/%s/validate-card/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2StripePromotionsRequest generates requests for GetApiV2StripePromotions
func NewGetApiV2StripePromotionsRequest(server string, params *GetApiV2StripePromotionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/promotions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2StripeSubscriptionsSubscriptionIdRequest generates requests for DeleteApiV2StripeSubscriptionsSubscriptionId
func NewDeleteApiV2StripeSubscriptionsSubscriptionIdRequest(server string, subscriptionId PathSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2StripeSubscriptionsSubscriptionIdRequest generates requests for GetApiV2StripeSubscriptionsSubscriptionId
func NewGetApiV2StripeSubscriptionsSubscriptionIdRequest(server string, subscriptionId PathSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2StripeSubscriptionsSubscriptionIdInvoicesRequest generates requests for GetApiV2StripeSubscriptionsSubscriptionIdInvoices
func NewGetApiV2StripeSubscriptionsSubscriptionIdInvoicesRequest(server string, subscriptionId PathSubscriptionId, params *GetApiV2StripeSubscriptionsSubscriptionIdInvoicesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/subscriptions/%s/invoices/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingRequest generates requests for GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcoming
func NewGetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingRequest(server string, subscriptionId PathSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/stripe/subscriptions/%s/invoices/upcoming/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2SubscriptionsRequest generates requests for GetApiV2Subscriptions
func NewGetApiV2SubscriptionsRequest(server string, params *GetApiV2SubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/subscriptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_id", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2SubscriptionsRequest calls the generic PostApiV2Subscriptions builder with application/json body
func NewPostApiV2SubscriptionsRequest(server string, body PostApiV2SubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2SubscriptionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2SubscriptionsRequestWithBody generates requests for PostApiV2Subscriptions with any type of body
func NewPostApiV2SubscriptionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/subscriptions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2SubscriptionsSubscriptionIdRequest generates requests for DeleteApiV2SubscriptionsSubscriptionId
func NewDeleteApiV2SubscriptionsSubscriptionIdRequest(server string, subscriptionId PathSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2SubscriptionsSubscriptionIdRequest generates requests for GetApiV2SubscriptionsSubscriptionId
func NewGetApiV2SubscriptionsSubscriptionIdRequest(server string, subscriptionId PathSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/subscriptions/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2SubscriptionsSubscriptionIdAssignOrgRequest calls the generic PatchApiV2SubscriptionsSubscriptionIdAssignOrg builder with application/json body
func NewPatchApiV2SubscriptionsSubscriptionIdAssignOrgRequest(server string, subscriptionId PathSubscriptionId, body PatchApiV2SubscriptionsSubscriptionIdAssignOrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2SubscriptionsSubscriptionIdAssignOrgRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewPatchApiV2SubscriptionsSubscriptionIdAssignOrgRequestWithBody generates requests for PatchApiV2SubscriptionsSubscriptionIdAssignOrg with any type of body
func NewPatchApiV2SubscriptionsSubscriptionIdAssignOrgRequestWithBody(server string, subscriptionId PathSubscriptionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/subscriptions/%s/assign-org/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2SubscriptionsSubscriptionIdWizardRedirectRequest generates requests for GetApiV2SubscriptionsSubscriptionIdWizardRedirect
func NewGetApiV2SubscriptionsSubscriptionIdWizardRedirectRequest(server string, subscriptionId PathSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscription_id", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/subscriptions/%s/wizard-redirect/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2UsersRequest generates requests for GetApiV2Users
func NewGetApiV2UsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2UsersMeRequest generates requests for GetApiV2UsersMe
func NewGetApiV2UsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2UsersMeRequest calls the generic PatchApiV2UsersMe builder with application/json body
func NewPatchApiV2UsersMeRequest(server string, body PatchApiV2UsersMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2UsersMeRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchApiV2UsersMeRequestWithBody generates requests for PatchApiV2UsersMe with any type of body
func NewPatchApiV2UsersMeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2UsersMeAcceptInviteRequest calls the generic PostApiV2UsersMeAcceptInvite builder with application/json body
func NewPostApiV2UsersMeAcceptInviteRequest(server string, body PostApiV2UsersMeAcceptInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2UsersMeAcceptInviteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2UsersMeAcceptInviteRequestWithBody generates requests for PostApiV2UsersMeAcceptInvite with any type of body
func NewPostApiV2UsersMeAcceptInviteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/accept-invite/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2UsersMeApiKeysRequest generates requests for GetApiV2UsersMeApiKeys
func NewGetApiV2UsersMeApiKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/api-keys/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2UsersMeApiKeysRequest generates requests for PostApiV2UsersMeApiKeys
func NewPostApiV2UsersMeApiKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/api-keys/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2UsersMeApiKeysApiKeyRequest generates requests for DeleteApiV2UsersMeApiKeysApiKey
func NewDeleteApiV2UsersMeApiKeysApiKeyRequest(server string, apiKey PathApiKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationPath, apiKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/api-keys/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2UsersMeApiKeysApiKeyRequest generates requests for GetApiV2UsersMeApiKeysApiKey
func NewGetApiV2UsersMeApiKeysApiKeyRequest(server string, apiKey PathApiKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationPath, apiKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/api-keys/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2UsersMeApiKeysApiKeyRequest calls the generic PatchApiV2UsersMeApiKeysApiKey builder with application/json body
func NewPatchApiV2UsersMeApiKeysApiKeyRequest(server string, apiKey PathApiKey, body PatchApiV2UsersMeApiKeysApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2UsersMeApiKeysApiKeyRequestWithBody(server, apiKey, "application/json", bodyReader)
}

// NewPatchApiV2UsersMeApiKeysApiKeyRequestWithBody generates requests for PatchApiV2UsersMeApiKeysApiKey with any type of body
func NewPatchApiV2UsersMeApiKeysApiKeyRequestWithBody(server string, apiKey PathApiKey, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationPath, apiKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/api-keys/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV2UsersMeConfirmEmailRequest calls the generic PutApiV2UsersMeConfirmEmail builder with application/json body
func NewPutApiV2UsersMeConfirmEmailRequest(server string, body PutApiV2UsersMeConfirmEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2UsersMeConfirmEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiV2UsersMeConfirmEmailRequestWithBody generates requests for PutApiV2UsersMeConfirmEmail with any type of body
func NewPutApiV2UsersMeConfirmEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/confirm-email/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2UsersUserIdRequest generates requests for DeleteApiV2UsersUserId
func NewDeleteApiV2UsersUserIdRequest(server string, userId PathUserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV2AwsSubscriptionsSubscriptionIdWithResponse request
	GetApiV2AwsSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2AwsSubscriptionsSubscriptionIdResponse, error)

	// PatchApiV2AwsSubscriptionsSubscriptionIdWithBodyWithResponse request with any body
	PatchApiV2AwsSubscriptionsSubscriptionIdWithBodyWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2AwsSubscriptionsSubscriptionIdResponse, error)

	PatchApiV2AwsSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, body PatchApiV2AwsSubscriptionsSubscriptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2AwsSubscriptionsSubscriptionIdResponse, error)

	// GetApiV2AzureSubscriptionsSubscriptionIdWithResponse request
	GetApiV2AzureSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2AzureSubscriptionsSubscriptionIdResponse, error)

	// GetApiV2ClustersWithResponse request
	GetApiV2ClustersWithResponse(ctx context.Context, params *GetApiV2ClustersParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersResponse, error)

	// HeadApiV2ClustersNameNameWithResponse request
	HeadApiV2ClustersNameNameWithResponse(ctx context.Context, name PathName, reqEditors ...RequestEditorFn) (*HeadApiV2ClustersNameNameResponse, error)

	// DeleteApiV2ClustersClusterIdWithResponse request
	DeleteApiV2ClustersClusterIdWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*DeleteApiV2ClustersClusterIdResponse, error)

	// GetApiV2ClustersClusterIdWithResponse request
	GetApiV2ClustersClusterIdWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdResponse, error)

	// PatchApiV2ClustersClusterIdWithBodyWithResponse request with any body
	PatchApiV2ClustersClusterIdWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2ClustersClusterIdResponse, error)

	PatchApiV2ClustersClusterIdWithResponse(ctx context.Context, clusterId PathClusterId, body PatchApiV2ClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2ClustersClusterIdResponse, error)

	// GetApiV2ClustersClusterIdAvailableProductsWithResponse request
	GetApiV2ClustersClusterIdAvailableProductsWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdAvailableProductsResponse, error)

	// GetApiV2ClustersClusterIdAvailableUpgradesWithResponse request
	GetApiV2ClustersClusterIdAvailableUpgradesWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdAvailableUpgradesResponse, error)

	// PutApiV2ClustersClusterIdBackupScheduleWithBodyWithResponse request with any body
	PutApiV2ClustersClusterIdBackupScheduleWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdBackupScheduleResponse, error)

	PutApiV2ClustersClusterIdBackupScheduleWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdBackupScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdBackupScheduleResponse, error)

	// PutApiV2ClustersClusterIdDeletionProtectionWithBodyWithResponse request with any body
	PutApiV2ClustersClusterIdDeletionProtectionWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdDeletionProtectionResponse, error)

	PutApiV2ClustersClusterIdDeletionProtectionWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdDeletionProtectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdDeletionProtectionResponse, error)

	// GetApiV2ClustersClusterIdExportJobsWithResponse request
	GetApiV2ClustersClusterIdExportJobsWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdExportJobsResponse, error)

	// PostApiV2ClustersClusterIdExportJobsWithBodyWithResponse request with any body
	PostApiV2ClustersClusterIdExportJobsWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdExportJobsResponse, error)

	PostApiV2ClustersClusterIdExportJobsWithResponse(ctx context.Context, clusterId PathClusterId, body PostApiV2ClustersClusterIdExportJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdExportJobsResponse, error)

	// DeleteApiV2ClustersClusterIdExportJobsExportJobIdWithResponse request
	DeleteApiV2ClustersClusterIdExportJobsExportJobIdWithResponse(ctx context.Context, clusterId PathClusterId, exportJobId PathExportJobId, reqEditors ...RequestEditorFn) (*DeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse, error)

	// GetApiV2ClustersClusterIdExportJobsExportJobIdWithResponse request
	GetApiV2ClustersClusterIdExportJobsExportJobIdWithResponse(ctx context.Context, clusterId PathClusterId, exportJobId PathExportJobId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdExportJobsExportJobIdResponse, error)

	// GetApiV2ClustersClusterIdImportJobsWithResponse request
	GetApiV2ClustersClusterIdImportJobsWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdImportJobsResponse, error)

	// PostApiV2ClustersClusterIdImportJobsWithBodyWithResponse request with any body
	PostApiV2ClustersClusterIdImportJobsWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdImportJobsResponse, error)

	PostApiV2ClustersClusterIdImportJobsWithResponse(ctx context.Context, clusterId PathClusterId, body PostApiV2ClustersClusterIdImportJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdImportJobsResponse, error)

	// DeleteApiV2ClustersClusterIdImportJobsImportJobIdWithResponse request
	DeleteApiV2ClustersClusterIdImportJobsImportJobIdWithResponse(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, reqEditors ...RequestEditorFn) (*DeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse, error)

	// GetApiV2ClustersClusterIdImportJobsImportJobIdWithResponse request
	GetApiV2ClustersClusterIdImportJobsImportJobIdWithResponse(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdImportJobsImportJobIdResponse, error)

	// GetApiV2ClustersClusterIdImportJobsImportJobIdProgressWithResponse request
	GetApiV2ClustersClusterIdImportJobsImportJobIdProgressWithResponse(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, params *GetApiV2ClustersClusterIdImportJobsImportJobIdProgressParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse, error)

	// PutApiV2ClustersClusterIdIpRestrictionsWithBodyWithResponse request with any body
	PutApiV2ClustersClusterIdIpRestrictionsWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdIpRestrictionsResponse, error)

	PutApiV2ClustersClusterIdIpRestrictionsWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdIpRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdIpRestrictionsResponse, error)

	// GetApiV2ClustersClusterIdJwtWithResponse request
	GetApiV2ClustersClusterIdJwtWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdJwtResponse, error)

	// GetApiV2ClustersClusterIdMetricsMetricIdWithResponse request
	GetApiV2ClustersClusterIdMetricsMetricIdWithResponse(ctx context.Context, clusterId PathClusterId, metricId GetApiV2ClustersClusterIdMetricsMetricIdParamsMetricId, params *GetApiV2ClustersClusterIdMetricsMetricIdParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdMetricsMetricIdResponse, error)

	// DeleteApiV2ClustersClusterIdNodesOrdinalWithResponse request
	DeleteApiV2ClustersClusterIdNodesOrdinalWithResponse(ctx context.Context, clusterId PathClusterId, ordinal PathOrdinal, reqEditors ...RequestEditorFn) (*DeleteApiV2ClustersClusterIdNodesOrdinalResponse, error)

	// GetApiV2ClustersClusterIdOperationsWithResponse request
	GetApiV2ClustersClusterIdOperationsWithResponse(ctx context.Context, clusterId PathClusterId, params *GetApiV2ClustersClusterIdOperationsParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdOperationsResponse, error)

	// PutApiV2ClustersClusterIdProductWithBodyWithResponse request with any body
	PutApiV2ClustersClusterIdProductWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdProductResponse, error)

	PutApiV2ClustersClusterIdProductWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdProductJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdProductResponse, error)

	// PutApiV2ClustersClusterIdScaleWithBodyWithResponse request with any body
	PutApiV2ClustersClusterIdScaleWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdScaleResponse, error)

	PutApiV2ClustersClusterIdScaleWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdScaleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdScaleResponse, error)

	// GetApiV2ClustersClusterIdSnapshotsWithResponse request
	GetApiV2ClustersClusterIdSnapshotsWithResponse(ctx context.Context, clusterId PathClusterId, params *GetApiV2ClustersClusterIdSnapshotsParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdSnapshotsResponse, error)

	// PostApiV2ClustersClusterIdSnapshotsRestoreWithBodyWithResponse request with any body
	PostApiV2ClustersClusterIdSnapshotsRestoreWithBodyWithResponse(ctx context.Context, clusterId PathTargetClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdSnapshotsRestoreResponse, error)

	PostApiV2ClustersClusterIdSnapshotsRestoreWithResponse(ctx context.Context, clusterId PathTargetClusterId, body PostApiV2ClustersClusterIdSnapshotsRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdSnapshotsRestoreResponse, error)

	// PutApiV2ClustersClusterIdStorageWithBodyWithResponse request with any body
	PutApiV2ClustersClusterIdStorageWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdStorageResponse, error)

	PutApiV2ClustersClusterIdStorageWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdStorageResponse, error)

	// PutApiV2ClustersClusterIdSuspendWithBodyWithResponse request with any body
	PutApiV2ClustersClusterIdSuspendWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdSuspendResponse, error)

	PutApiV2ClustersClusterIdSuspendWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdSuspendJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdSuspendResponse, error)

	// PutApiV2ClustersClusterIdUpgradeWithBodyWithResponse request with any body
	PutApiV2ClustersClusterIdUpgradeWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdUpgradeResponse, error)

	PutApiV2ClustersClusterIdUpgradeWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdUpgradeResponse, error)

	// GetApiV2ConfigurationsWithResponse request
	GetApiV2ConfigurationsWithResponse(ctx context.Context, params *GetApiV2ConfigurationsParams, reqEditors ...RequestEditorFn) (*GetApiV2ConfigurationsResponse, error)

	// GetApiV2ConfigurationsKeyWithResponse request
	GetApiV2ConfigurationsKeyWithResponse(ctx context.Context, key PathConfigurationKey, params *GetApiV2ConfigurationsKeyParams, reqEditors ...RequestEditorFn) (*GetApiV2ConfigurationsKeyResponse, error)

	// PutApiV2ConfigurationsKeyWithBodyWithResponse request with any body
	PutApiV2ConfigurationsKeyWithBodyWithResponse(ctx context.Context, key PathConfigurationKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ConfigurationsKeyResponse, error)

	PutApiV2ConfigurationsKeyWithResponse(ctx context.Context, key PathConfigurationKey, body PutApiV2ConfigurationsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ConfigurationsKeyResponse, error)

	// GetApiV2FeaturesStatusWithResponse request
	GetApiV2FeaturesStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2FeaturesStatusResponse, error)

	// GetApiV2GcpSubscriptionsSubscriptionIdWithResponse request
	GetApiV2GcpSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2GcpSubscriptionsSubscriptionIdResponse, error)

	// GetApiV2IntegrationsAwsS3BucketsWithResponse request
	GetApiV2IntegrationsAwsS3BucketsWithResponse(ctx context.Context, params *GetApiV2IntegrationsAwsS3BucketsParams, reqEditors ...RequestEditorFn) (*GetApiV2IntegrationsAwsS3BucketsResponse, error)

	// GetApiV2IntegrationsAwsS3ObjectsWithResponse request
	GetApiV2IntegrationsAwsS3ObjectsWithResponse(ctx context.Context, params *GetApiV2IntegrationsAwsS3ObjectsParams, reqEditors ...RequestEditorFn) (*GetApiV2IntegrationsAwsS3ObjectsResponse, error)

	// GetApiV2IntegrationsAzureBlobStorageContainersWithResponse request
	GetApiV2IntegrationsAzureBlobStorageContainersWithResponse(ctx context.Context, params *GetApiV2IntegrationsAzureBlobStorageContainersParams, reqEditors ...RequestEditorFn) (*GetApiV2IntegrationsAzureBlobStorageContainersResponse, error)

	// GetApiV2IntegrationsAzureBlobsWithResponse request
	GetApiV2IntegrationsAzureBlobsWithResponse(ctx context.Context, params *GetApiV2IntegrationsAzureBlobsParams, reqEditors ...RequestEditorFn) (*GetApiV2IntegrationsAzureBlobsResponse, error)

	// GetApiV2MetaWithResponse request
	GetApiV2MetaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2MetaResponse, error)

	// GetApiV2MetaCratedbVersionsWithResponse request
	GetApiV2MetaCratedbVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2MetaCratedbVersionsResponse, error)

	// GetApiV2MetaIpAddressWithResponse request
	GetApiV2MetaIpAddressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2MetaIpAddressResponse, error)

	// GetApiV2MetaJwkWithResponse request
	GetApiV2MetaJwkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2MetaJwkResponse, error)

	// PostApiV2MetaJwtRefreshWithBodyWithResponse request with any body
	PostApiV2MetaJwtRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2MetaJwtRefreshResponse, error)

	PostApiV2MetaJwtRefreshWithResponse(ctx context.Context, body PostApiV2MetaJwtRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2MetaJwtRefreshResponse, error)

	// GetApiV2OrganizationsWithResponse request
	GetApiV2OrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsResponse, error)

	// PostApiV2OrganizationsWithBodyWithResponse request with any body
	PostApiV2OrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsResponse, error)

	PostApiV2OrganizationsWithResponse(ctx context.Context, body PostApiV2OrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsResponse, error)

	// DeleteApiV2OrganizationsOrganizationIdWithResponse request
	DeleteApiV2OrganizationsOrganizationIdWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdResponse, error)

	// GetApiV2OrganizationsOrganizationIdWithResponse request
	GetApiV2OrganizationsOrganizationIdWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdResponse, error)

	// PutApiV2OrganizationsOrganizationIdWithBodyWithResponse request with any body
	PutApiV2OrganizationsOrganizationIdWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2OrganizationsOrganizationIdResponse, error)

	PutApiV2OrganizationsOrganizationIdWithResponse(ctx context.Context, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2OrganizationsOrganizationIdResponse, error)

	// GetApiV2OrganizationsOrganizationIdAuditlogsWithResponse request
	GetApiV2OrganizationsOrganizationIdAuditlogsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdAuditlogsParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdAuditlogsResponse, error)

	// GetApiV2OrganizationsOrganizationIdClustersWithResponse request
	GetApiV2OrganizationsOrganizationIdClustersWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdClustersParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdClustersResponse, error)

	// PostApiV2OrganizationsOrganizationIdClustersWithBodyWithResponse request with any body
	PostApiV2OrganizationsOrganizationIdClustersWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdClustersResponse, error)

	PostApiV2OrganizationsOrganizationIdClustersWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdClustersResponse, error)

	// GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthWithResponse request
	GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse, error)

	// GetApiV2OrganizationsOrganizationIdCreditsWithResponse request
	GetApiV2OrganizationsOrganizationIdCreditsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdCreditsParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdCreditsResponse, error)

	// PostApiV2OrganizationsOrganizationIdCreditsWithBodyWithResponse request with any body
	PostApiV2OrganizationsOrganizationIdCreditsWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdCreditsResponse, error)

	PostApiV2OrganizationsOrganizationIdCreditsWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdCreditsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdCreditsResponse, error)

	// DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdWithResponse request
	DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdWithResponse(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse, error)

	// PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithBodyWithResponse request with any body
	PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse, error)

	PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithResponse(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, body PatchApiV2OrganizationsOrganizationIdCreditsCreditIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse, error)

	// GetApiV2OrganizationsOrganizationIdCustomerWithResponse request
	GetApiV2OrganizationsOrganizationIdCustomerWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdCustomerResponse, error)

	// PutApiV2OrganizationsOrganizationIdCustomerWithBodyWithResponse request with any body
	PutApiV2OrganizationsOrganizationIdCustomerWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2OrganizationsOrganizationIdCustomerResponse, error)

	PutApiV2OrganizationsOrganizationIdCustomerWithResponse(ctx context.Context, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2OrganizationsOrganizationIdCustomerResponse, error)

	// GetApiV2OrganizationsOrganizationIdFilesWithResponse request
	GetApiV2OrganizationsOrganizationIdFilesWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdFilesResponse, error)

	// PostApiV2OrganizationsOrganizationIdFilesWithBodyWithResponse request with any body
	PostApiV2OrganizationsOrganizationIdFilesWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdFilesResponse, error)

	PostApiV2OrganizationsOrganizationIdFilesWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdFilesResponse, error)

	// DeleteApiV2OrganizationsOrganizationIdFilesFileIdWithResponse request
	DeleteApiV2OrganizationsOrganizationIdFilesFileIdWithResponse(ctx context.Context, organizationId PathOrganizationId, fileId PathFileId, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse, error)

	// GetApiV2OrganizationsOrganizationIdFilesFileIdWithResponse request
	GetApiV2OrganizationsOrganizationIdFilesFileIdWithResponse(ctx context.Context, organizationId PathOrganizationId, fileId PathFileId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdFilesFileIdResponse, error)

	// GetApiV2OrganizationsOrganizationIdInvitationsWithResponse request
	GetApiV2OrganizationsOrganizationIdInvitationsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdInvitationsParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdInvitationsResponse, error)

	// DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenWithResponse request
	DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenWithResponse(ctx context.Context, organizationId PathOrganizationId, inviteToken PathInviteToken, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse, error)

	// GetApiV2OrganizationsOrganizationIdMetricsPrometheusWithResponse request
	GetApiV2OrganizationsOrganizationIdMetricsPrometheusWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse, error)

	// GetApiV2OrganizationsOrganizationIdPaymentMethodsWithResponse request
	GetApiV2OrganizationsOrganizationIdPaymentMethodsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdPaymentMethodsResponse, error)

	// GetApiV2OrganizationsOrganizationIdProjectsWithResponse request
	GetApiV2OrganizationsOrganizationIdProjectsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdProjectsResponse, error)

	// GetApiV2OrganizationsOrganizationIdQuotasWithResponse request
	GetApiV2OrganizationsOrganizationIdQuotasWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdQuotasResponse, error)

	// GetApiV2OrganizationsOrganizationIdRegionsWithResponse request
	GetApiV2OrganizationsOrganizationIdRegionsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdRegionsResponse, error)

	// GetApiV2OrganizationsOrganizationIdRemainingBudgetWithResponse request
	GetApiV2OrganizationsOrganizationIdRemainingBudgetWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdRemainingBudgetParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdRemainingBudgetResponse, error)

	// GetApiV2OrganizationsOrganizationIdSecretsWithResponse request
	GetApiV2OrganizationsOrganizationIdSecretsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdSecretsResponse, error)

	// PostApiV2OrganizationsOrganizationIdSecretsWithBodyWithResponse request with any body
	PostApiV2OrganizationsOrganizationIdSecretsWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdSecretsResponse, error)

	PostApiV2OrganizationsOrganizationIdSecretsWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdSecretsResponse, error)

	// DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdWithResponse request
	DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdWithResponse(ctx context.Context, organizationId PathOrganizationId, secretId PathOrganizationSecretId, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse, error)

	// GetApiV2OrganizationsOrganizationIdSubscriptionsWithResponse request
	GetApiV2OrganizationsOrganizationIdSubscriptionsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdSubscriptionsResponse, error)

	// GetApiV2OrganizationsOrganizationIdUsersWithResponse request
	GetApiV2OrganizationsOrganizationIdUsersWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdUsersResponse, error)

	// PostApiV2OrganizationsOrganizationIdUsersWithBodyWithResponse request with any body
	PostApiV2OrganizationsOrganizationIdUsersWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdUsersResponse, error)

	PostApiV2OrganizationsOrganizationIdUsersWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdUsersResponse, error)

	// DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailWithResponse request
	DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailWithResponse(ctx context.Context, organizationId PathOrganizationId, userIdOrEmail PathUserIdOrEmail, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse, error)

	// GetApiV2ProductsWithResponse request
	GetApiV2ProductsWithResponse(ctx context.Context, params *GetApiV2ProductsParams, reqEditors ...RequestEditorFn) (*GetApiV2ProductsResponse, error)

	// GetApiV2ProductsClustersPriceWithResponse request
	GetApiV2ProductsClustersPriceWithResponse(ctx context.Context, params *GetApiV2ProductsClustersPriceParams, reqEditors ...RequestEditorFn) (*GetApiV2ProductsClustersPriceResponse, error)

	// GetApiV2ProductsKindWithResponse request
	GetApiV2ProductsKindWithResponse(ctx context.Context, kind PathProductKind, params *GetApiV2ProductsKindParams, reqEditors ...RequestEditorFn) (*GetApiV2ProductsKindResponse, error)

	// GetApiV2ProjectsWithResponse request
	GetApiV2ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2ProjectsResponse, error)

	// PostApiV2ProjectsWithBodyWithResponse request with any body
	PostApiV2ProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ProjectsResponse, error)

	PostApiV2ProjectsWithResponse(ctx context.Context, body PostApiV2ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ProjectsResponse, error)

	// DeleteApiV2ProjectsProjectIdWithResponse request
	DeleteApiV2ProjectsProjectIdWithResponse(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*DeleteApiV2ProjectsProjectIdResponse, error)

	// GetApiV2ProjectsProjectIdWithResponse request
	GetApiV2ProjectsProjectIdWithResponse(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*GetApiV2ProjectsProjectIdResponse, error)

	// PatchApiV2ProjectsProjectIdWithBodyWithResponse request with any body
	PatchApiV2ProjectsProjectIdWithBodyWithResponse(ctx context.Context, projectId PathProjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2ProjectsProjectIdResponse, error)

	PatchApiV2ProjectsProjectIdWithResponse(ctx context.Context, projectId PathProjectId, body PatchApiV2ProjectsProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2ProjectsProjectIdResponse, error)

	// GetApiV2ProjectsProjectIdClustersWithResponse request
	GetApiV2ProjectsProjectIdClustersWithResponse(ctx context.Context, projectId PathProjectId, params *GetApiV2ProjectsProjectIdClustersParams, reqEditors ...RequestEditorFn) (*GetApiV2ProjectsProjectIdClustersResponse, error)

	// GetApiV2ProjectsProjectIdUsersWithResponse request
	GetApiV2ProjectsProjectIdUsersWithResponse(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*GetApiV2ProjectsProjectIdUsersResponse, error)

	// PostApiV2ProjectsProjectIdUsersWithBodyWithResponse request with any body
	PostApiV2ProjectsProjectIdUsersWithBodyWithResponse(ctx context.Context, projectId PathProjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ProjectsProjectIdUsersResponse, error)

	PostApiV2ProjectsProjectIdUsersWithResponse(ctx context.Context, projectId PathProjectId, body PostApiV2ProjectsProjectIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ProjectsProjectIdUsersResponse, error)

	// DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailWithResponse request
	DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailWithResponse(ctx context.Context, projectId PathProjectId, userIdOrEmail PathUserIdOrEmail, reqEditors ...RequestEditorFn) (*DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse, error)

	// GetApiV2RegionsWithResponse request
	GetApiV2RegionsWithResponse(ctx context.Context, params *GetApiV2RegionsParams, reqEditors ...RequestEditorFn) (*GetApiV2RegionsResponse, error)

	// PostApiV2RegionsWithBodyWithResponse request with any body
	PostApiV2RegionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2RegionsResponse, error)

	PostApiV2RegionsWithResponse(ctx context.Context, body PostApiV2RegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2RegionsResponse, error)

	// DeleteApiV2RegionsRegionNameWithResponse request
	DeleteApiV2RegionsRegionNameWithResponse(ctx context.Context, regionName PathRegionName, reqEditors ...RequestEditorFn) (*DeleteApiV2RegionsRegionNameResponse, error)

	// GetApiV2RegionsRegionNameInstallTokenWithResponse request
	GetApiV2RegionsRegionNameInstallTokenWithResponse(ctx context.Context, regionName PathRegionName, reqEditors ...RequestEditorFn) (*GetApiV2RegionsRegionNameInstallTokenResponse, error)

	// PostApiV2RegionsRegionNameVerifyBackupLocationWithBodyWithResponse request with any body
	PostApiV2RegionsRegionNameVerifyBackupLocationWithBodyWithResponse(ctx context.Context, regionName PathRegionName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2RegionsRegionNameVerifyBackupLocationResponse, error)

	PostApiV2RegionsRegionNameVerifyBackupLocationWithResponse(ctx context.Context, regionName PathRegionName, body PostApiV2RegionsRegionNameVerifyBackupLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2RegionsRegionNameVerifyBackupLocationResponse, error)

	// GetApiV2RolesWithResponse request
	GetApiV2RolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2RolesResponse, error)

	// PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupWithResponse request
	PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse, error)

	// PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentWithResponse request
	PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse, error)

	// PostApiV2StripeCardOrganizationsOrganizationIdSetupWithResponse request
	PostApiV2StripeCardOrganizationsOrganizationIdSetupWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeCardOrganizationsOrganizationIdSetupResponse, error)

	// GetApiV2StripeOrganizationsOrganizationIdBillingInformationWithResponse request
	GetApiV2StripeOrganizationsOrganizationIdBillingInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse, error)

	// PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithBodyWithResponse request with any body
	PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse, error)

	PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, body PatchApiV2StripeOrganizationsOrganizationIdBillingInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse, error)

	// GetApiV2StripeOrganizationsOrganizationIdCardsWithResponse request
	GetApiV2StripeOrganizationsOrganizationIdCardsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2StripeOrganizationsOrganizationIdCardsResponse, error)

	// DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdWithResponse request
	DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdWithResponse(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, reqEditors ...RequestEditorFn) (*DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse, error)

	// PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithBodyWithResponse request with any body
	PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse, error)

	PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithResponse(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, body PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse, error)

	// PostApiV2StripeOrganizationsOrganizationIdSetupPaymentWithResponse request
	PostApiV2StripeOrganizationsOrganizationIdSetupPaymentWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse, error)

	// PostApiV2StripeOrganizationsOrganizationIdSetupWithResponse request
	PostApiV2StripeOrganizationsOrganizationIdSetupWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeOrganizationsOrganizationIdSetupResponse, error)

	// PostApiV2StripeOrganizationsOrganizationIdValidateCardWithResponse request
	PostApiV2StripeOrganizationsOrganizationIdValidateCardWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeOrganizationsOrganizationIdValidateCardResponse, error)

	// GetApiV2StripePromotionsWithResponse request
	GetApiV2StripePromotionsWithResponse(ctx context.Context, params *GetApiV2StripePromotionsParams, reqEditors ...RequestEditorFn) (*GetApiV2StripePromotionsResponse, error)

	// DeleteApiV2StripeSubscriptionsSubscriptionIdWithResponse request
	DeleteApiV2StripeSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*DeleteApiV2StripeSubscriptionsSubscriptionIdResponse, error)

	// GetApiV2StripeSubscriptionsSubscriptionIdWithResponse request
	GetApiV2StripeSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2StripeSubscriptionsSubscriptionIdResponse, error)

	// GetApiV2StripeSubscriptionsSubscriptionIdInvoicesWithResponse request
	GetApiV2StripeSubscriptionsSubscriptionIdInvoicesWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, params *GetApiV2StripeSubscriptionsSubscriptionIdInvoicesParams, reqEditors ...RequestEditorFn) (*GetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse, error)

	// GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingWithResponse request
	GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse, error)

	// GetApiV2SubscriptionsWithResponse request
	GetApiV2SubscriptionsWithResponse(ctx context.Context, params *GetApiV2SubscriptionsParams, reqEditors ...RequestEditorFn) (*GetApiV2SubscriptionsResponse, error)

	// PostApiV2SubscriptionsWithBodyWithResponse request with any body
	PostApiV2SubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2SubscriptionsResponse, error)

	PostApiV2SubscriptionsWithResponse(ctx context.Context, body PostApiV2SubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2SubscriptionsResponse, error)

	// DeleteApiV2SubscriptionsSubscriptionIdWithResponse request
	DeleteApiV2SubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*DeleteApiV2SubscriptionsSubscriptionIdResponse, error)

	// GetApiV2SubscriptionsSubscriptionIdWithResponse request
	GetApiV2SubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2SubscriptionsSubscriptionIdResponse, error)

	// PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithBodyWithResponse request with any body
	PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithBodyWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse, error)

	PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, body PatchApiV2SubscriptionsSubscriptionIdAssignOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse, error)

	// GetApiV2SubscriptionsSubscriptionIdWizardRedirectWithResponse request
	GetApiV2SubscriptionsSubscriptionIdWizardRedirectWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse, error)

	// GetApiV2UsersWithResponse request
	GetApiV2UsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersResponse, error)

	// GetApiV2UsersMeWithResponse request
	GetApiV2UsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeResponse, error)

	// PatchApiV2UsersMeWithBodyWithResponse request with any body
	PatchApiV2UsersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2UsersMeResponse, error)

	PatchApiV2UsersMeWithResponse(ctx context.Context, body PatchApiV2UsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2UsersMeResponse, error)

	// PostApiV2UsersMeAcceptInviteWithBodyWithResponse request with any body
	PostApiV2UsersMeAcceptInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2UsersMeAcceptInviteResponse, error)

	PostApiV2UsersMeAcceptInviteWithResponse(ctx context.Context, body PostApiV2UsersMeAcceptInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2UsersMeAcceptInviteResponse, error)

	// GetApiV2UsersMeApiKeysWithResponse request
	GetApiV2UsersMeApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeApiKeysResponse, error)

	// PostApiV2UsersMeApiKeysWithResponse request
	PostApiV2UsersMeApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV2UsersMeApiKeysResponse, error)

	// DeleteApiV2UsersMeApiKeysApiKeyWithResponse request
	DeleteApiV2UsersMeApiKeysApiKeyWithResponse(ctx context.Context, apiKey PathApiKey, reqEditors ...RequestEditorFn) (*DeleteApiV2UsersMeApiKeysApiKeyResponse, error)

	// GetApiV2UsersMeApiKeysApiKeyWithResponse request
	GetApiV2UsersMeApiKeysApiKeyWithResponse(ctx context.Context, apiKey PathApiKey, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeApiKeysApiKeyResponse, error)

	// PatchApiV2UsersMeApiKeysApiKeyWithBodyWithResponse request with any body
	PatchApiV2UsersMeApiKeysApiKeyWithBodyWithResponse(ctx context.Context, apiKey PathApiKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2UsersMeApiKeysApiKeyResponse, error)

	PatchApiV2UsersMeApiKeysApiKeyWithResponse(ctx context.Context, apiKey PathApiKey, body PatchApiV2UsersMeApiKeysApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2UsersMeApiKeysApiKeyResponse, error)

	// PutApiV2UsersMeConfirmEmailWithBodyWithResponse request with any body
	PutApiV2UsersMeConfirmEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2UsersMeConfirmEmailResponse, error)

	PutApiV2UsersMeConfirmEmailWithResponse(ctx context.Context, body PutApiV2UsersMeConfirmEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2UsersMeConfirmEmailResponse, error)

	// DeleteApiV2UsersUserIdWithResponse request
	DeleteApiV2UsersUserIdWithResponse(ctx context.Context, userId PathUserId, reqEditors ...RequestEditorFn) (*DeleteApiV2UsersUserIdResponse, error)
}

type GetApiV2AwsSubscriptionsSubscriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2AwsSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2AwsSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2AwsSubscriptionsSubscriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PatchApiV2AwsSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2AwsSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2AzureSubscriptionsSubscriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2AzureSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2AzureSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cluster
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadApiV2ClustersNameNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r HeadApiV2ClustersNameNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadApiV2ClustersNameNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2ClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2ClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2ClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2ClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PatchApiV2ClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2ClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdAvailableProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Product
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdAvailableProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdAvailableProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdAvailableUpgradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CrateDBVersions
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdAvailableUpgradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdAvailableUpgradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2ClustersClusterIdBackupScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2ClustersClusterIdBackupScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2ClustersClusterIdBackupScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2ClustersClusterIdDeletionProtectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2ClustersClusterIdDeletionProtectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2ClustersClusterIdDeletionProtectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdExportJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClusterExportJob
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdExportJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdExportJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2ClustersClusterIdExportJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ClusterExportJob
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2ClustersClusterIdExportJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2ClustersClusterIdExportJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdExportJobsExportJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterExportJob
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdExportJobsExportJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdExportJobsExportJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdImportJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClusterImportJob
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdImportJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdImportJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2ClustersClusterIdImportJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ClusterImportJob
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2ClustersClusterIdImportJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2ClustersClusterIdImportJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdImportJobsImportJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterImportJob
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdImportJobsImportJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdImportJobsImportJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataJobData
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2ClustersClusterIdIpRestrictionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2ClustersClusterIdIpRestrictionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2ClustersClusterIdIpRestrictionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdJwtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterJWTToken
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdJwtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdJwtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdMetricsMetricIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdMetricsMetricIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdMetricsMetricIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2ClustersClusterIdNodesOrdinalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		ApiVersion *string `json:"apiVersion,omitempty"`
		Code       *int    `json:"code,omitempty"`
		Kind       *string `json:"kind,omitempty"`
		Status     *string `json:"status,omitempty"`
	}
	JSON401 *N401
	JSON403 *N403
	JSON404 *N404
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2ClustersClusterIdNodesOrdinalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2ClustersClusterIdNodesOrdinalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdOperationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterAsyncOperationsList
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdOperationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdOperationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2ClustersClusterIdProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2ClustersClusterIdProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2ClustersClusterIdProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2ClustersClusterIdScaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2ClustersClusterIdScaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2ClustersClusterIdScaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ClustersClusterIdSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClusterSnapshot
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ClustersClusterIdSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ClustersClusterIdSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2ClustersClusterIdSnapshotsRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterSnapshot
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2ClustersClusterIdSnapshotsRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2ClustersClusterIdSnapshotsRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2ClustersClusterIdStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2ClustersClusterIdStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2ClustersClusterIdStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2ClustersClusterIdSuspendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2ClustersClusterIdSuspendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2ClustersClusterIdSuspendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2ClustersClusterIdUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2ClustersClusterIdUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2ClustersClusterIdUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ConfigurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ConfigurationItem
	JSON401      *N401
	JSON403      *N403
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ConfigurationsKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigurationItem
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ConfigurationsKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ConfigurationsKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2ConfigurationsKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigurationItem
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2ConfigurationsKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2ConfigurationsKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2FeaturesStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureFlags
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2FeaturesStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2FeaturesStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2GcpSubscriptionsSubscriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2GcpSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2GcpSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2IntegrationsAwsS3BucketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BucketsList
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2IntegrationsAwsS3BucketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2IntegrationsAwsS3BucketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2IntegrationsAwsS3ObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectsList
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2IntegrationsAwsS3ObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2IntegrationsAwsS3ObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2IntegrationsAzureBlobStorageContainersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainersList
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2IntegrationsAzureBlobStorageContainersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2IntegrationsAzureBlobStorageContainersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2IntegrationsAzureBlobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BlobsList
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2IntegrationsAzureBlobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2IntegrationsAzureBlobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2MetaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Meta
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2MetaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2MetaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2MetaCratedbVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CrateDBVersions
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2MetaCratedbVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2MetaCratedbVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2MetaIpAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IPAddress
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2MetaIpAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2MetaIpAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2MetaJwkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JWK
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2MetaJwkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2MetaJwkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2MetaJwtRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterJWTToken
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2MetaJwtRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2MetaJwtRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Organization
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2OrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Organization
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2OrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2OrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2OrganizationsOrganizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2OrganizationsOrganizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2OrganizationsOrganizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2OrganizationsOrganizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2OrganizationsOrganizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2OrganizationsOrganizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdAuditlogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuditEvent
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdAuditlogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdAuditlogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cluster
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2OrganizationsOrganizationIdClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Cluster
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2OrganizationsOrganizationIdClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2OrganizationsOrganizationIdClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationCurrentConsumptionSchema
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdCreditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Credit
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdCreditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdCreditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2OrganizationsOrganizationIdCreditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Credit
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2OrganizationsOrganizationIdCreditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2OrganizationsOrganizationIdCreditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credit
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2OrganizationsOrganizationIdCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2OrganizationsOrganizationIdCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2OrganizationsOrganizationIdCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]File
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2OrganizationsOrganizationIdFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *File
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2OrganizationsOrganizationIdFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2OrganizationsOrganizationIdFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdFilesFileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *File
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdFilesFileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdFilesFileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationInvitation
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdPaymentMethodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PaymentMethod
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdPaymentMethodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdPaymentMethodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Project
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdQuotasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Quota
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdQuotasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdQuotasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Region
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdRemainingBudgetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationRemainingBudget
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdRemainingBudgetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdRemainingBudgetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Secret
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2OrganizationsOrganizationIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Secret
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2OrganizationsOrganizationIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2OrganizationsOrganizationIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Subscription
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationUser
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2OrganizationsOrganizationIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationRole
	JSON201      *OrganizationRole
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2OrganizationsOrganizationIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2OrganizationsOrganizationIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Product
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ProductsClustersPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductPricing
	JSON401      *N401
	JSON404      *N401
	JSON500      *N401
}

// Status returns HTTPResponse.Status
func (r GetApiV2ProductsClustersPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ProductsClustersPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ProductsKindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Product
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ProductsKindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ProductsKindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Project
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2ProjectsProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2ProjectsProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2ProjectsProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ProjectsProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ProjectsProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ProjectsProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2ProjectsProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PatchApiV2ProjectsProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2ProjectsProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ProjectsProjectIdClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cluster
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ProjectsProjectIdClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ProjectsProjectIdClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ProjectsProjectIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProjectUser
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2ProjectsProjectIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ProjectsProjectIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2ProjectsProjectIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectRole
	JSON201      *ProjectRole
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2ProjectsProjectIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2ProjectsProjectIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2RegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Region
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2RegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2RegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2RegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Region
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2RegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2RegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2RegionsRegionNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2RegionsRegionNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2RegionsRegionNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2RegionsRegionNameInstallTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstallToken
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2RegionsRegionNameInstallTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2RegionsRegionNameInstallTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2RegionsRegionNameVerifyBackupLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectBackupLocationVerifyResponse
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2RegionsRegionNameVerifyBackupLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2RegionsRegionNameVerifyBackupLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2RolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Role
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2RolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2RolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupPaymentIntent
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2StripeCardOrganizationsOrganizationIdSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupIntent
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2StripeCardOrganizationsOrganizationIdSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2StripeCardOrganizationsOrganizationIdSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingInformation
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingInformation
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2StripeOrganizationsOrganizationIdCardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomerCard
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2StripeOrganizationsOrganizationIdCardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2StripeOrganizationsOrganizationIdCardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerCard
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerCard
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupPaymentIntent
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2StripeOrganizationsOrganizationIdSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupIntent
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2StripeOrganizationsOrganizationIdSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2StripeOrganizationsOrganizationIdSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2StripeOrganizationsOrganizationIdValidateCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidateCard
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2StripeOrganizationsOrganizationIdValidateCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2StripeOrganizationsOrganizationIdValidateCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2StripePromotionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Promotion
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2StripePromotionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2StripePromotionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2StripeSubscriptionsSubscriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2StripeSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2StripeSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2StripeSubscriptionsSubscriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2StripeSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2StripeSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InvoiceConsumption
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceConsumption
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2SubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Subscription
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2SubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2SubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2SubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Subscription
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2SubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2SubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2SubscriptionsSubscriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2SubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2SubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2SubscriptionsSubscriptionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2SubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2SubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2UsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CurrentUser
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2UsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2UsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2UsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CurrentUser
	JSON202      *struct {
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
		Success *bool   `json:"success,omitempty"`
	}
	JSON400 *N400
	JSON401 *N401
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r PatchApiV2UsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2UsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2UsersMeAcceptInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationRole
	JSON201      *OrganizationRole
	JSON400      *N400
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2UsersMeAcceptInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2UsersMeAcceptInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2UsersMeApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewApiKeySchema
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2UsersMeApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2UsersMeApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2UsersMeApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NewApiKeyResponseSchema
	JSON400      *N400
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostApiV2UsersMeApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2UsersMeApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2UsersMeApiKeysApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2UsersMeApiKeysApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2UsersMeApiKeysApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2UsersMeApiKeysApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NewApiKeySchema
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetApiV2UsersMeApiKeysApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2UsersMeApiKeysApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2UsersMeApiKeysApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NewApiKeySchema
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PatchApiV2UsersMeApiKeysApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2UsersMeApiKeysApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2UsersMeConfirmEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CurrentUser
	JSON400      *N400
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutApiV2UsersMeConfirmEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2UsersMeConfirmEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2UsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2UsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2UsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV2AwsSubscriptionsSubscriptionIdWithResponse request returning *GetApiV2AwsSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) GetApiV2AwsSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2AwsSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.GetApiV2AwsSubscriptionsSubscriptionId(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2AwsSubscriptionsSubscriptionIdResponse(rsp)
}

// PatchApiV2AwsSubscriptionsSubscriptionIdWithBodyWithResponse request with arbitrary body returning *PatchApiV2AwsSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) PatchApiV2AwsSubscriptionsSubscriptionIdWithBodyWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2AwsSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.PatchApiV2AwsSubscriptionsSubscriptionIdWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2AwsSubscriptionsSubscriptionIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2AwsSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, body PatchApiV2AwsSubscriptionsSubscriptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2AwsSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.PatchApiV2AwsSubscriptionsSubscriptionId(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2AwsSubscriptionsSubscriptionIdResponse(rsp)
}

// GetApiV2AzureSubscriptionsSubscriptionIdWithResponse request returning *GetApiV2AzureSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) GetApiV2AzureSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2AzureSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.GetApiV2AzureSubscriptionsSubscriptionId(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2AzureSubscriptionsSubscriptionIdResponse(rsp)
}

// GetApiV2ClustersWithResponse request returning *GetApiV2ClustersResponse
func (c *ClientWithResponses) GetApiV2ClustersWithResponse(ctx context.Context, params *GetApiV2ClustersParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersResponse, error) {
	rsp, err := c.GetApiV2Clusters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersResponse(rsp)
}

// HeadApiV2ClustersNameNameWithResponse request returning *HeadApiV2ClustersNameNameResponse
func (c *ClientWithResponses) HeadApiV2ClustersNameNameWithResponse(ctx context.Context, name PathName, reqEditors ...RequestEditorFn) (*HeadApiV2ClustersNameNameResponse, error) {
	rsp, err := c.HeadApiV2ClustersNameName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadApiV2ClustersNameNameResponse(rsp)
}

// DeleteApiV2ClustersClusterIdWithResponse request returning *DeleteApiV2ClustersClusterIdResponse
func (c *ClientWithResponses) DeleteApiV2ClustersClusterIdWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*DeleteApiV2ClustersClusterIdResponse, error) {
	rsp, err := c.DeleteApiV2ClustersClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2ClustersClusterIdResponse(rsp)
}

// GetApiV2ClustersClusterIdWithResponse request returning *GetApiV2ClustersClusterIdResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdResponse(rsp)
}

// PatchApiV2ClustersClusterIdWithBodyWithResponse request with arbitrary body returning *PatchApiV2ClustersClusterIdResponse
func (c *ClientWithResponses) PatchApiV2ClustersClusterIdWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2ClustersClusterIdResponse, error) {
	rsp, err := c.PatchApiV2ClustersClusterIdWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2ClustersClusterIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2ClustersClusterIdWithResponse(ctx context.Context, clusterId PathClusterId, body PatchApiV2ClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2ClustersClusterIdResponse, error) {
	rsp, err := c.PatchApiV2ClustersClusterId(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2ClustersClusterIdResponse(rsp)
}

// GetApiV2ClustersClusterIdAvailableProductsWithResponse request returning *GetApiV2ClustersClusterIdAvailableProductsResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdAvailableProductsWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdAvailableProductsResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdAvailableProducts(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdAvailableProductsResponse(rsp)
}

// GetApiV2ClustersClusterIdAvailableUpgradesWithResponse request returning *GetApiV2ClustersClusterIdAvailableUpgradesResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdAvailableUpgradesWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdAvailableUpgradesResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdAvailableUpgrades(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdAvailableUpgradesResponse(rsp)
}

// PutApiV2ClustersClusterIdBackupScheduleWithBodyWithResponse request with arbitrary body returning *PutApiV2ClustersClusterIdBackupScheduleResponse
func (c *ClientWithResponses) PutApiV2ClustersClusterIdBackupScheduleWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdBackupScheduleResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdBackupScheduleWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdBackupScheduleResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2ClustersClusterIdBackupScheduleWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdBackupScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdBackupScheduleResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdBackupSchedule(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdBackupScheduleResponse(rsp)
}

// PutApiV2ClustersClusterIdDeletionProtectionWithBodyWithResponse request with arbitrary body returning *PutApiV2ClustersClusterIdDeletionProtectionResponse
func (c *ClientWithResponses) PutApiV2ClustersClusterIdDeletionProtectionWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdDeletionProtectionResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdDeletionProtectionWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdDeletionProtectionResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2ClustersClusterIdDeletionProtectionWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdDeletionProtectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdDeletionProtectionResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdDeletionProtection(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdDeletionProtectionResponse(rsp)
}

// GetApiV2ClustersClusterIdExportJobsWithResponse request returning *GetApiV2ClustersClusterIdExportJobsResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdExportJobsWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdExportJobsResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdExportJobs(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdExportJobsResponse(rsp)
}

// PostApiV2ClustersClusterIdExportJobsWithBodyWithResponse request with arbitrary body returning *PostApiV2ClustersClusterIdExportJobsResponse
func (c *ClientWithResponses) PostApiV2ClustersClusterIdExportJobsWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdExportJobsResponse, error) {
	rsp, err := c.PostApiV2ClustersClusterIdExportJobsWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ClustersClusterIdExportJobsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2ClustersClusterIdExportJobsWithResponse(ctx context.Context, clusterId PathClusterId, body PostApiV2ClustersClusterIdExportJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdExportJobsResponse, error) {
	rsp, err := c.PostApiV2ClustersClusterIdExportJobs(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ClustersClusterIdExportJobsResponse(rsp)
}

// DeleteApiV2ClustersClusterIdExportJobsExportJobIdWithResponse request returning *DeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse
func (c *ClientWithResponses) DeleteApiV2ClustersClusterIdExportJobsExportJobIdWithResponse(ctx context.Context, clusterId PathClusterId, exportJobId PathExportJobId, reqEditors ...RequestEditorFn) (*DeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse, error) {
	rsp, err := c.DeleteApiV2ClustersClusterIdExportJobsExportJobId(ctx, clusterId, exportJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse(rsp)
}

// GetApiV2ClustersClusterIdExportJobsExportJobIdWithResponse request returning *GetApiV2ClustersClusterIdExportJobsExportJobIdResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdExportJobsExportJobIdWithResponse(ctx context.Context, clusterId PathClusterId, exportJobId PathExportJobId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdExportJobsExportJobIdResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdExportJobsExportJobId(ctx, clusterId, exportJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdExportJobsExportJobIdResponse(rsp)
}

// GetApiV2ClustersClusterIdImportJobsWithResponse request returning *GetApiV2ClustersClusterIdImportJobsResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdImportJobsWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdImportJobsResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdImportJobs(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdImportJobsResponse(rsp)
}

// PostApiV2ClustersClusterIdImportJobsWithBodyWithResponse request with arbitrary body returning *PostApiV2ClustersClusterIdImportJobsResponse
func (c *ClientWithResponses) PostApiV2ClustersClusterIdImportJobsWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdImportJobsResponse, error) {
	rsp, err := c.PostApiV2ClustersClusterIdImportJobsWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ClustersClusterIdImportJobsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2ClustersClusterIdImportJobsWithResponse(ctx context.Context, clusterId PathClusterId, body PostApiV2ClustersClusterIdImportJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdImportJobsResponse, error) {
	rsp, err := c.PostApiV2ClustersClusterIdImportJobs(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ClustersClusterIdImportJobsResponse(rsp)
}

// DeleteApiV2ClustersClusterIdImportJobsImportJobIdWithResponse request returning *DeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse
func (c *ClientWithResponses) DeleteApiV2ClustersClusterIdImportJobsImportJobIdWithResponse(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, reqEditors ...RequestEditorFn) (*DeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse, error) {
	rsp, err := c.DeleteApiV2ClustersClusterIdImportJobsImportJobId(ctx, clusterId, importJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse(rsp)
}

// GetApiV2ClustersClusterIdImportJobsImportJobIdWithResponse request returning *GetApiV2ClustersClusterIdImportJobsImportJobIdResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdImportJobsImportJobIdWithResponse(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdImportJobsImportJobIdResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdImportJobsImportJobId(ctx, clusterId, importJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdImportJobsImportJobIdResponse(rsp)
}

// GetApiV2ClustersClusterIdImportJobsImportJobIdProgressWithResponse request returning *GetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdImportJobsImportJobIdProgressWithResponse(ctx context.Context, clusterId PathClusterId, importJobId PathImportJobId, params *GetApiV2ClustersClusterIdImportJobsImportJobIdProgressParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdImportJobsImportJobIdProgress(ctx, clusterId, importJobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse(rsp)
}

// PutApiV2ClustersClusterIdIpRestrictionsWithBodyWithResponse request with arbitrary body returning *PutApiV2ClustersClusterIdIpRestrictionsResponse
func (c *ClientWithResponses) PutApiV2ClustersClusterIdIpRestrictionsWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdIpRestrictionsResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdIpRestrictionsWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdIpRestrictionsResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2ClustersClusterIdIpRestrictionsWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdIpRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdIpRestrictionsResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdIpRestrictions(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdIpRestrictionsResponse(rsp)
}

// GetApiV2ClustersClusterIdJwtWithResponse request returning *GetApiV2ClustersClusterIdJwtResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdJwtWithResponse(ctx context.Context, clusterId PathClusterId, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdJwtResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdJwt(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdJwtResponse(rsp)
}

// GetApiV2ClustersClusterIdMetricsMetricIdWithResponse request returning *GetApiV2ClustersClusterIdMetricsMetricIdResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdMetricsMetricIdWithResponse(ctx context.Context, clusterId PathClusterId, metricId GetApiV2ClustersClusterIdMetricsMetricIdParamsMetricId, params *GetApiV2ClustersClusterIdMetricsMetricIdParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdMetricsMetricIdResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdMetricsMetricId(ctx, clusterId, metricId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdMetricsMetricIdResponse(rsp)
}

// DeleteApiV2ClustersClusterIdNodesOrdinalWithResponse request returning *DeleteApiV2ClustersClusterIdNodesOrdinalResponse
func (c *ClientWithResponses) DeleteApiV2ClustersClusterIdNodesOrdinalWithResponse(ctx context.Context, clusterId PathClusterId, ordinal PathOrdinal, reqEditors ...RequestEditorFn) (*DeleteApiV2ClustersClusterIdNodesOrdinalResponse, error) {
	rsp, err := c.DeleteApiV2ClustersClusterIdNodesOrdinal(ctx, clusterId, ordinal, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2ClustersClusterIdNodesOrdinalResponse(rsp)
}

// GetApiV2ClustersClusterIdOperationsWithResponse request returning *GetApiV2ClustersClusterIdOperationsResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdOperationsWithResponse(ctx context.Context, clusterId PathClusterId, params *GetApiV2ClustersClusterIdOperationsParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdOperationsResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdOperations(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdOperationsResponse(rsp)
}

// PutApiV2ClustersClusterIdProductWithBodyWithResponse request with arbitrary body returning *PutApiV2ClustersClusterIdProductResponse
func (c *ClientWithResponses) PutApiV2ClustersClusterIdProductWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdProductResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdProductWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdProductResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2ClustersClusterIdProductWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdProductJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdProductResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdProduct(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdProductResponse(rsp)
}

// PutApiV2ClustersClusterIdScaleWithBodyWithResponse request with arbitrary body returning *PutApiV2ClustersClusterIdScaleResponse
func (c *ClientWithResponses) PutApiV2ClustersClusterIdScaleWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdScaleResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdScaleWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdScaleResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2ClustersClusterIdScaleWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdScaleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdScaleResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdScale(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdScaleResponse(rsp)
}

// GetApiV2ClustersClusterIdSnapshotsWithResponse request returning *GetApiV2ClustersClusterIdSnapshotsResponse
func (c *ClientWithResponses) GetApiV2ClustersClusterIdSnapshotsWithResponse(ctx context.Context, clusterId PathClusterId, params *GetApiV2ClustersClusterIdSnapshotsParams, reqEditors ...RequestEditorFn) (*GetApiV2ClustersClusterIdSnapshotsResponse, error) {
	rsp, err := c.GetApiV2ClustersClusterIdSnapshots(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ClustersClusterIdSnapshotsResponse(rsp)
}

// PostApiV2ClustersClusterIdSnapshotsRestoreWithBodyWithResponse request with arbitrary body returning *PostApiV2ClustersClusterIdSnapshotsRestoreResponse
func (c *ClientWithResponses) PostApiV2ClustersClusterIdSnapshotsRestoreWithBodyWithResponse(ctx context.Context, clusterId PathTargetClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdSnapshotsRestoreResponse, error) {
	rsp, err := c.PostApiV2ClustersClusterIdSnapshotsRestoreWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ClustersClusterIdSnapshotsRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2ClustersClusterIdSnapshotsRestoreWithResponse(ctx context.Context, clusterId PathTargetClusterId, body PostApiV2ClustersClusterIdSnapshotsRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ClustersClusterIdSnapshotsRestoreResponse, error) {
	rsp, err := c.PostApiV2ClustersClusterIdSnapshotsRestore(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ClustersClusterIdSnapshotsRestoreResponse(rsp)
}

// PutApiV2ClustersClusterIdStorageWithBodyWithResponse request with arbitrary body returning *PutApiV2ClustersClusterIdStorageResponse
func (c *ClientWithResponses) PutApiV2ClustersClusterIdStorageWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdStorageResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdStorageWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdStorageResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2ClustersClusterIdStorageWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdStorageResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdStorage(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdStorageResponse(rsp)
}

// PutApiV2ClustersClusterIdSuspendWithBodyWithResponse request with arbitrary body returning *PutApiV2ClustersClusterIdSuspendResponse
func (c *ClientWithResponses) PutApiV2ClustersClusterIdSuspendWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdSuspendResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdSuspendWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdSuspendResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2ClustersClusterIdSuspendWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdSuspendJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdSuspendResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdSuspend(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdSuspendResponse(rsp)
}

// PutApiV2ClustersClusterIdUpgradeWithBodyWithResponse request with arbitrary body returning *PutApiV2ClustersClusterIdUpgradeResponse
func (c *ClientWithResponses) PutApiV2ClustersClusterIdUpgradeWithBodyWithResponse(ctx context.Context, clusterId PathClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdUpgradeResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdUpgradeWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdUpgradeResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2ClustersClusterIdUpgradeWithResponse(ctx context.Context, clusterId PathClusterId, body PutApiV2ClustersClusterIdUpgradeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ClustersClusterIdUpgradeResponse, error) {
	rsp, err := c.PutApiV2ClustersClusterIdUpgrade(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ClustersClusterIdUpgradeResponse(rsp)
}

// GetApiV2ConfigurationsWithResponse request returning *GetApiV2ConfigurationsResponse
func (c *ClientWithResponses) GetApiV2ConfigurationsWithResponse(ctx context.Context, params *GetApiV2ConfigurationsParams, reqEditors ...RequestEditorFn) (*GetApiV2ConfigurationsResponse, error) {
	rsp, err := c.GetApiV2Configurations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ConfigurationsResponse(rsp)
}

// GetApiV2ConfigurationsKeyWithResponse request returning *GetApiV2ConfigurationsKeyResponse
func (c *ClientWithResponses) GetApiV2ConfigurationsKeyWithResponse(ctx context.Context, key PathConfigurationKey, params *GetApiV2ConfigurationsKeyParams, reqEditors ...RequestEditorFn) (*GetApiV2ConfigurationsKeyResponse, error) {
	rsp, err := c.GetApiV2ConfigurationsKey(ctx, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ConfigurationsKeyResponse(rsp)
}

// PutApiV2ConfigurationsKeyWithBodyWithResponse request with arbitrary body returning *PutApiV2ConfigurationsKeyResponse
func (c *ClientWithResponses) PutApiV2ConfigurationsKeyWithBodyWithResponse(ctx context.Context, key PathConfigurationKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2ConfigurationsKeyResponse, error) {
	rsp, err := c.PutApiV2ConfigurationsKeyWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ConfigurationsKeyResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2ConfigurationsKeyWithResponse(ctx context.Context, key PathConfigurationKey, body PutApiV2ConfigurationsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2ConfigurationsKeyResponse, error) {
	rsp, err := c.PutApiV2ConfigurationsKey(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2ConfigurationsKeyResponse(rsp)
}

// GetApiV2FeaturesStatusWithResponse request returning *GetApiV2FeaturesStatusResponse
func (c *ClientWithResponses) GetApiV2FeaturesStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2FeaturesStatusResponse, error) {
	rsp, err := c.GetApiV2FeaturesStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2FeaturesStatusResponse(rsp)
}

// GetApiV2GcpSubscriptionsSubscriptionIdWithResponse request returning *GetApiV2GcpSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) GetApiV2GcpSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2GcpSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.GetApiV2GcpSubscriptionsSubscriptionId(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2GcpSubscriptionsSubscriptionIdResponse(rsp)
}

// GetApiV2IntegrationsAwsS3BucketsWithResponse request returning *GetApiV2IntegrationsAwsS3BucketsResponse
func (c *ClientWithResponses) GetApiV2IntegrationsAwsS3BucketsWithResponse(ctx context.Context, params *GetApiV2IntegrationsAwsS3BucketsParams, reqEditors ...RequestEditorFn) (*GetApiV2IntegrationsAwsS3BucketsResponse, error) {
	rsp, err := c.GetApiV2IntegrationsAwsS3Buckets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2IntegrationsAwsS3BucketsResponse(rsp)
}

// GetApiV2IntegrationsAwsS3ObjectsWithResponse request returning *GetApiV2IntegrationsAwsS3ObjectsResponse
func (c *ClientWithResponses) GetApiV2IntegrationsAwsS3ObjectsWithResponse(ctx context.Context, params *GetApiV2IntegrationsAwsS3ObjectsParams, reqEditors ...RequestEditorFn) (*GetApiV2IntegrationsAwsS3ObjectsResponse, error) {
	rsp, err := c.GetApiV2IntegrationsAwsS3Objects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2IntegrationsAwsS3ObjectsResponse(rsp)
}

// GetApiV2IntegrationsAzureBlobStorageContainersWithResponse request returning *GetApiV2IntegrationsAzureBlobStorageContainersResponse
func (c *ClientWithResponses) GetApiV2IntegrationsAzureBlobStorageContainersWithResponse(ctx context.Context, params *GetApiV2IntegrationsAzureBlobStorageContainersParams, reqEditors ...RequestEditorFn) (*GetApiV2IntegrationsAzureBlobStorageContainersResponse, error) {
	rsp, err := c.GetApiV2IntegrationsAzureBlobStorageContainers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2IntegrationsAzureBlobStorageContainersResponse(rsp)
}

// GetApiV2IntegrationsAzureBlobsWithResponse request returning *GetApiV2IntegrationsAzureBlobsResponse
func (c *ClientWithResponses) GetApiV2IntegrationsAzureBlobsWithResponse(ctx context.Context, params *GetApiV2IntegrationsAzureBlobsParams, reqEditors ...RequestEditorFn) (*GetApiV2IntegrationsAzureBlobsResponse, error) {
	rsp, err := c.GetApiV2IntegrationsAzureBlobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2IntegrationsAzureBlobsResponse(rsp)
}

// GetApiV2MetaWithResponse request returning *GetApiV2MetaResponse
func (c *ClientWithResponses) GetApiV2MetaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2MetaResponse, error) {
	rsp, err := c.GetApiV2Meta(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2MetaResponse(rsp)
}

// GetApiV2MetaCratedbVersionsWithResponse request returning *GetApiV2MetaCratedbVersionsResponse
func (c *ClientWithResponses) GetApiV2MetaCratedbVersionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2MetaCratedbVersionsResponse, error) {
	rsp, err := c.GetApiV2MetaCratedbVersions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2MetaCratedbVersionsResponse(rsp)
}

// GetApiV2MetaIpAddressWithResponse request returning *GetApiV2MetaIpAddressResponse
func (c *ClientWithResponses) GetApiV2MetaIpAddressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2MetaIpAddressResponse, error) {
	rsp, err := c.GetApiV2MetaIpAddress(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2MetaIpAddressResponse(rsp)
}

// GetApiV2MetaJwkWithResponse request returning *GetApiV2MetaJwkResponse
func (c *ClientWithResponses) GetApiV2MetaJwkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2MetaJwkResponse, error) {
	rsp, err := c.GetApiV2MetaJwk(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2MetaJwkResponse(rsp)
}

// PostApiV2MetaJwtRefreshWithBodyWithResponse request with arbitrary body returning *PostApiV2MetaJwtRefreshResponse
func (c *ClientWithResponses) PostApiV2MetaJwtRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2MetaJwtRefreshResponse, error) {
	rsp, err := c.PostApiV2MetaJwtRefreshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2MetaJwtRefreshResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2MetaJwtRefreshWithResponse(ctx context.Context, body PostApiV2MetaJwtRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2MetaJwtRefreshResponse, error) {
	rsp, err := c.PostApiV2MetaJwtRefresh(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2MetaJwtRefreshResponse(rsp)
}

// GetApiV2OrganizationsWithResponse request returning *GetApiV2OrganizationsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsResponse, error) {
	rsp, err := c.GetApiV2Organizations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsResponse(rsp)
}

// PostApiV2OrganizationsWithBodyWithResponse request with arbitrary body returning *PostApiV2OrganizationsResponse
func (c *ClientWithResponses) PostApiV2OrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsResponse, error) {
	rsp, err := c.PostApiV2OrganizationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2OrganizationsWithResponse(ctx context.Context, body PostApiV2OrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsResponse, error) {
	rsp, err := c.PostApiV2Organizations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsResponse(rsp)
}

// DeleteApiV2OrganizationsOrganizationIdWithResponse request returning *DeleteApiV2OrganizationsOrganizationIdResponse
func (c *ClientWithResponses) DeleteApiV2OrganizationsOrganizationIdWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdResponse, error) {
	rsp, err := c.DeleteApiV2OrganizationsOrganizationId(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2OrganizationsOrganizationIdResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdWithResponse request returning *GetApiV2OrganizationsOrganizationIdResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationId(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdResponse(rsp)
}

// PutApiV2OrganizationsOrganizationIdWithBodyWithResponse request with arbitrary body returning *PutApiV2OrganizationsOrganizationIdResponse
func (c *ClientWithResponses) PutApiV2OrganizationsOrganizationIdWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2OrganizationsOrganizationIdResponse, error) {
	rsp, err := c.PutApiV2OrganizationsOrganizationIdWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2OrganizationsOrganizationIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2OrganizationsOrganizationIdWithResponse(ctx context.Context, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2OrganizationsOrganizationIdResponse, error) {
	rsp, err := c.PutApiV2OrganizationsOrganizationId(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2OrganizationsOrganizationIdResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdAuditlogsWithResponse request returning *GetApiV2OrganizationsOrganizationIdAuditlogsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdAuditlogsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdAuditlogsParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdAuditlogsResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdAuditlogs(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdAuditlogsResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdClustersWithResponse request returning *GetApiV2OrganizationsOrganizationIdClustersResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdClustersWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdClustersParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdClustersResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdClusters(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdClustersResponse(rsp)
}

// PostApiV2OrganizationsOrganizationIdClustersWithBodyWithResponse request with arbitrary body returning *PostApiV2OrganizationsOrganizationIdClustersResponse
func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdClustersWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdClustersResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdClustersWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdClustersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdClustersWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdClustersResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdClusters(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdClustersResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthWithResponse request returning *GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonth(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdCreditsWithResponse request returning *GetApiV2OrganizationsOrganizationIdCreditsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdCreditsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdCreditsParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdCreditsResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdCredits(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdCreditsResponse(rsp)
}

// PostApiV2OrganizationsOrganizationIdCreditsWithBodyWithResponse request with arbitrary body returning *PostApiV2OrganizationsOrganizationIdCreditsResponse
func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdCreditsWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdCreditsResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdCreditsWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdCreditsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdCreditsWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdCreditsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdCreditsResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdCredits(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdCreditsResponse(rsp)
}

// DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdWithResponse request returning *DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse
func (c *ClientWithResponses) DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdWithResponse(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse, error) {
	rsp, err := c.DeleteApiV2OrganizationsOrganizationIdCreditsCreditId(ctx, organizationId, creditId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse(rsp)
}

// PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithBodyWithResponse request with arbitrary body returning *PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse
func (c *ClientWithResponses) PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse, error) {
	rsp, err := c.PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithBody(ctx, organizationId, creditId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithResponse(ctx context.Context, organizationId PathOrganizationId, creditId PathCreditId, body PatchApiV2OrganizationsOrganizationIdCreditsCreditIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse, error) {
	rsp, err := c.PatchApiV2OrganizationsOrganizationIdCreditsCreditId(ctx, organizationId, creditId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdCustomerWithResponse request returning *GetApiV2OrganizationsOrganizationIdCustomerResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdCustomerWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdCustomerResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdCustomer(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdCustomerResponse(rsp)
}

// PutApiV2OrganizationsOrganizationIdCustomerWithBodyWithResponse request with arbitrary body returning *PutApiV2OrganizationsOrganizationIdCustomerResponse
func (c *ClientWithResponses) PutApiV2OrganizationsOrganizationIdCustomerWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2OrganizationsOrganizationIdCustomerResponse, error) {
	rsp, err := c.PutApiV2OrganizationsOrganizationIdCustomerWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2OrganizationsOrganizationIdCustomerResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2OrganizationsOrganizationIdCustomerWithResponse(ctx context.Context, organizationId PathOrganizationId, body PutApiV2OrganizationsOrganizationIdCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2OrganizationsOrganizationIdCustomerResponse, error) {
	rsp, err := c.PutApiV2OrganizationsOrganizationIdCustomer(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2OrganizationsOrganizationIdCustomerResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdFilesWithResponse request returning *GetApiV2OrganizationsOrganizationIdFilesResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdFilesWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdFilesResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdFiles(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdFilesResponse(rsp)
}

// PostApiV2OrganizationsOrganizationIdFilesWithBodyWithResponse request with arbitrary body returning *PostApiV2OrganizationsOrganizationIdFilesResponse
func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdFilesWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdFilesResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdFilesWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdFilesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdFilesWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdFilesResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdFiles(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdFilesResponse(rsp)
}

// DeleteApiV2OrganizationsOrganizationIdFilesFileIdWithResponse request returning *DeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse
func (c *ClientWithResponses) DeleteApiV2OrganizationsOrganizationIdFilesFileIdWithResponse(ctx context.Context, organizationId PathOrganizationId, fileId PathFileId, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse, error) {
	rsp, err := c.DeleteApiV2OrganizationsOrganizationIdFilesFileId(ctx, organizationId, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdFilesFileIdWithResponse request returning *GetApiV2OrganizationsOrganizationIdFilesFileIdResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdFilesFileIdWithResponse(ctx context.Context, organizationId PathOrganizationId, fileId PathFileId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdFilesFileIdResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdFilesFileId(ctx, organizationId, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdFilesFileIdResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdInvitationsWithResponse request returning *GetApiV2OrganizationsOrganizationIdInvitationsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdInvitationsWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdInvitationsParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdInvitationsResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdInvitations(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdInvitationsResponse(rsp)
}

// DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenWithResponse request returning *DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse
func (c *ClientWithResponses) DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenWithResponse(ctx context.Context, organizationId PathOrganizationId, inviteToken PathInviteToken, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse, error) {
	rsp, err := c.DeleteApiV2OrganizationsOrganizationIdInvitationsInviteToken(ctx, organizationId, inviteToken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdMetricsPrometheusWithResponse request returning *GetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdMetricsPrometheusWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdMetricsPrometheus(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdPaymentMethodsWithResponse request returning *GetApiV2OrganizationsOrganizationIdPaymentMethodsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdPaymentMethodsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdPaymentMethodsResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdPaymentMethods(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdPaymentMethodsResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdProjectsWithResponse request returning *GetApiV2OrganizationsOrganizationIdProjectsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdProjectsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdProjectsResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdProjects(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdProjectsResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdQuotasWithResponse request returning *GetApiV2OrganizationsOrganizationIdQuotasResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdQuotasWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdQuotasResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdQuotas(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdQuotasResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdRegionsWithResponse request returning *GetApiV2OrganizationsOrganizationIdRegionsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdRegionsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdRegionsResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdRegions(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdRegionsResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdRemainingBudgetWithResponse request returning *GetApiV2OrganizationsOrganizationIdRemainingBudgetResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdRemainingBudgetWithResponse(ctx context.Context, organizationId PathOrganizationId, params *GetApiV2OrganizationsOrganizationIdRemainingBudgetParams, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdRemainingBudgetResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdRemainingBudget(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdRemainingBudgetResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdSecretsWithResponse request returning *GetApiV2OrganizationsOrganizationIdSecretsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdSecretsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdSecretsResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdSecrets(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdSecretsResponse(rsp)
}

// PostApiV2OrganizationsOrganizationIdSecretsWithBodyWithResponse request with arbitrary body returning *PostApiV2OrganizationsOrganizationIdSecretsResponse
func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdSecretsWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdSecretsResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdSecretsWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdSecretsWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdSecretsResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdSecrets(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdSecretsResponse(rsp)
}

// DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdWithResponse request returning *DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse
func (c *ClientWithResponses) DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdWithResponse(ctx context.Context, organizationId PathOrganizationId, secretId PathOrganizationSecretId, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse, error) {
	rsp, err := c.DeleteApiV2OrganizationsOrganizationIdSecretsSecretId(ctx, organizationId, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdSubscriptionsWithResponse request returning *GetApiV2OrganizationsOrganizationIdSubscriptionsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdSubscriptionsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdSubscriptionsResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdSubscriptions(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdSubscriptionsResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdUsersWithResponse request returning *GetApiV2OrganizationsOrganizationIdUsersResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdUsersWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdUsersResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdUsers(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdUsersResponse(rsp)
}

// PostApiV2OrganizationsOrganizationIdUsersWithBodyWithResponse request with arbitrary body returning *PostApiV2OrganizationsOrganizationIdUsersResponse
func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdUsersWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdUsersResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdUsersWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdUsersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2OrganizationsOrganizationIdUsersWithResponse(ctx context.Context, organizationId PathOrganizationId, body PostApiV2OrganizationsOrganizationIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2OrganizationsOrganizationIdUsersResponse, error) {
	rsp, err := c.PostApiV2OrganizationsOrganizationIdUsers(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2OrganizationsOrganizationIdUsersResponse(rsp)
}

// DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailWithResponse request returning *DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse
func (c *ClientWithResponses) DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailWithResponse(ctx context.Context, organizationId PathOrganizationId, userIdOrEmail PathUserIdOrEmail, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse, error) {
	rsp, err := c.DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmail(ctx, organizationId, userIdOrEmail, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse(rsp)
}

// GetApiV2ProductsWithResponse request returning *GetApiV2ProductsResponse
func (c *ClientWithResponses) GetApiV2ProductsWithResponse(ctx context.Context, params *GetApiV2ProductsParams, reqEditors ...RequestEditorFn) (*GetApiV2ProductsResponse, error) {
	rsp, err := c.GetApiV2Products(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ProductsResponse(rsp)
}

// GetApiV2ProductsClustersPriceWithResponse request returning *GetApiV2ProductsClustersPriceResponse
func (c *ClientWithResponses) GetApiV2ProductsClustersPriceWithResponse(ctx context.Context, params *GetApiV2ProductsClustersPriceParams, reqEditors ...RequestEditorFn) (*GetApiV2ProductsClustersPriceResponse, error) {
	rsp, err := c.GetApiV2ProductsClustersPrice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ProductsClustersPriceResponse(rsp)
}

// GetApiV2ProductsKindWithResponse request returning *GetApiV2ProductsKindResponse
func (c *ClientWithResponses) GetApiV2ProductsKindWithResponse(ctx context.Context, kind PathProductKind, params *GetApiV2ProductsKindParams, reqEditors ...RequestEditorFn) (*GetApiV2ProductsKindResponse, error) {
	rsp, err := c.GetApiV2ProductsKind(ctx, kind, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ProductsKindResponse(rsp)
}

// GetApiV2ProjectsWithResponse request returning *GetApiV2ProjectsResponse
func (c *ClientWithResponses) GetApiV2ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2ProjectsResponse, error) {
	rsp, err := c.GetApiV2Projects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ProjectsResponse(rsp)
}

// PostApiV2ProjectsWithBodyWithResponse request with arbitrary body returning *PostApiV2ProjectsResponse
func (c *ClientWithResponses) PostApiV2ProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ProjectsResponse, error) {
	rsp, err := c.PostApiV2ProjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2ProjectsWithResponse(ctx context.Context, body PostApiV2ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ProjectsResponse, error) {
	rsp, err := c.PostApiV2Projects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ProjectsResponse(rsp)
}

// DeleteApiV2ProjectsProjectIdWithResponse request returning *DeleteApiV2ProjectsProjectIdResponse
func (c *ClientWithResponses) DeleteApiV2ProjectsProjectIdWithResponse(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*DeleteApiV2ProjectsProjectIdResponse, error) {
	rsp, err := c.DeleteApiV2ProjectsProjectId(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2ProjectsProjectIdResponse(rsp)
}

// GetApiV2ProjectsProjectIdWithResponse request returning *GetApiV2ProjectsProjectIdResponse
func (c *ClientWithResponses) GetApiV2ProjectsProjectIdWithResponse(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*GetApiV2ProjectsProjectIdResponse, error) {
	rsp, err := c.GetApiV2ProjectsProjectId(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ProjectsProjectIdResponse(rsp)
}

// PatchApiV2ProjectsProjectIdWithBodyWithResponse request with arbitrary body returning *PatchApiV2ProjectsProjectIdResponse
func (c *ClientWithResponses) PatchApiV2ProjectsProjectIdWithBodyWithResponse(ctx context.Context, projectId PathProjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2ProjectsProjectIdResponse, error) {
	rsp, err := c.PatchApiV2ProjectsProjectIdWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2ProjectsProjectIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2ProjectsProjectIdWithResponse(ctx context.Context, projectId PathProjectId, body PatchApiV2ProjectsProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2ProjectsProjectIdResponse, error) {
	rsp, err := c.PatchApiV2ProjectsProjectId(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2ProjectsProjectIdResponse(rsp)
}

// GetApiV2ProjectsProjectIdClustersWithResponse request returning *GetApiV2ProjectsProjectIdClustersResponse
func (c *ClientWithResponses) GetApiV2ProjectsProjectIdClustersWithResponse(ctx context.Context, projectId PathProjectId, params *GetApiV2ProjectsProjectIdClustersParams, reqEditors ...RequestEditorFn) (*GetApiV2ProjectsProjectIdClustersResponse, error) {
	rsp, err := c.GetApiV2ProjectsProjectIdClusters(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ProjectsProjectIdClustersResponse(rsp)
}

// GetApiV2ProjectsProjectIdUsersWithResponse request returning *GetApiV2ProjectsProjectIdUsersResponse
func (c *ClientWithResponses) GetApiV2ProjectsProjectIdUsersWithResponse(ctx context.Context, projectId PathProjectId, reqEditors ...RequestEditorFn) (*GetApiV2ProjectsProjectIdUsersResponse, error) {
	rsp, err := c.GetApiV2ProjectsProjectIdUsers(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ProjectsProjectIdUsersResponse(rsp)
}

// PostApiV2ProjectsProjectIdUsersWithBodyWithResponse request with arbitrary body returning *PostApiV2ProjectsProjectIdUsersResponse
func (c *ClientWithResponses) PostApiV2ProjectsProjectIdUsersWithBodyWithResponse(ctx context.Context, projectId PathProjectId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ProjectsProjectIdUsersResponse, error) {
	rsp, err := c.PostApiV2ProjectsProjectIdUsersWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ProjectsProjectIdUsersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2ProjectsProjectIdUsersWithResponse(ctx context.Context, projectId PathProjectId, body PostApiV2ProjectsProjectIdUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ProjectsProjectIdUsersResponse, error) {
	rsp, err := c.PostApiV2ProjectsProjectIdUsers(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ProjectsProjectIdUsersResponse(rsp)
}

// DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailWithResponse request returning *DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse
func (c *ClientWithResponses) DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailWithResponse(ctx context.Context, projectId PathProjectId, userIdOrEmail PathUserIdOrEmail, reqEditors ...RequestEditorFn) (*DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse, error) {
	rsp, err := c.DeleteApiV2ProjectsProjectIdUsersUserIdOrEmail(ctx, projectId, userIdOrEmail, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse(rsp)
}

// GetApiV2RegionsWithResponse request returning *GetApiV2RegionsResponse
func (c *ClientWithResponses) GetApiV2RegionsWithResponse(ctx context.Context, params *GetApiV2RegionsParams, reqEditors ...RequestEditorFn) (*GetApiV2RegionsResponse, error) {
	rsp, err := c.GetApiV2Regions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2RegionsResponse(rsp)
}

// PostApiV2RegionsWithBodyWithResponse request with arbitrary body returning *PostApiV2RegionsResponse
func (c *ClientWithResponses) PostApiV2RegionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2RegionsResponse, error) {
	rsp, err := c.PostApiV2RegionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2RegionsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2RegionsWithResponse(ctx context.Context, body PostApiV2RegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2RegionsResponse, error) {
	rsp, err := c.PostApiV2Regions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2RegionsResponse(rsp)
}

// DeleteApiV2RegionsRegionNameWithResponse request returning *DeleteApiV2RegionsRegionNameResponse
func (c *ClientWithResponses) DeleteApiV2RegionsRegionNameWithResponse(ctx context.Context, regionName PathRegionName, reqEditors ...RequestEditorFn) (*DeleteApiV2RegionsRegionNameResponse, error) {
	rsp, err := c.DeleteApiV2RegionsRegionName(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2RegionsRegionNameResponse(rsp)
}

// GetApiV2RegionsRegionNameInstallTokenWithResponse request returning *GetApiV2RegionsRegionNameInstallTokenResponse
func (c *ClientWithResponses) GetApiV2RegionsRegionNameInstallTokenWithResponse(ctx context.Context, regionName PathRegionName, reqEditors ...RequestEditorFn) (*GetApiV2RegionsRegionNameInstallTokenResponse, error) {
	rsp, err := c.GetApiV2RegionsRegionNameInstallToken(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2RegionsRegionNameInstallTokenResponse(rsp)
}

// PostApiV2RegionsRegionNameVerifyBackupLocationWithBodyWithResponse request with arbitrary body returning *PostApiV2RegionsRegionNameVerifyBackupLocationResponse
func (c *ClientWithResponses) PostApiV2RegionsRegionNameVerifyBackupLocationWithBodyWithResponse(ctx context.Context, regionName PathRegionName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2RegionsRegionNameVerifyBackupLocationResponse, error) {
	rsp, err := c.PostApiV2RegionsRegionNameVerifyBackupLocationWithBody(ctx, regionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2RegionsRegionNameVerifyBackupLocationResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2RegionsRegionNameVerifyBackupLocationWithResponse(ctx context.Context, regionName PathRegionName, body PostApiV2RegionsRegionNameVerifyBackupLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2RegionsRegionNameVerifyBackupLocationResponse, error) {
	rsp, err := c.PostApiV2RegionsRegionNameVerifyBackupLocation(ctx, regionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2RegionsRegionNameVerifyBackupLocationResponse(rsp)
}

// GetApiV2RolesWithResponse request returning *GetApiV2RolesResponse
func (c *ClientWithResponses) GetApiV2RolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2RolesResponse, error) {
	rsp, err := c.GetApiV2Roles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2RolesResponse(rsp)
}

// PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupWithResponse request returning *PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse
func (c *ClientWithResponses) PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse, error) {
	rsp, err := c.PostApiV2StripeBankTransferOrganizationsOrganizationIdSetup(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse(rsp)
}

// PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentWithResponse request returning *PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse
func (c *ClientWithResponses) PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse, error) {
	rsp, err := c.PostApiV2StripeCardOrganizationsOrganizationIdSetupPayment(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse(rsp)
}

// PostApiV2StripeCardOrganizationsOrganizationIdSetupWithResponse request returning *PostApiV2StripeCardOrganizationsOrganizationIdSetupResponse
func (c *ClientWithResponses) PostApiV2StripeCardOrganizationsOrganizationIdSetupWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeCardOrganizationsOrganizationIdSetupResponse, error) {
	rsp, err := c.PostApiV2StripeCardOrganizationsOrganizationIdSetup(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2StripeCardOrganizationsOrganizationIdSetupResponse(rsp)
}

// GetApiV2StripeOrganizationsOrganizationIdBillingInformationWithResponse request returning *GetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse
func (c *ClientWithResponses) GetApiV2StripeOrganizationsOrganizationIdBillingInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse, error) {
	rsp, err := c.GetApiV2StripeOrganizationsOrganizationIdBillingInformation(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse(rsp)
}

// PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithBodyWithResponse request with arbitrary body returning *PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse
func (c *ClientWithResponses) PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse, error) {
	rsp, err := c.PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithResponse(ctx context.Context, organizationId PathOrganizationId, body PatchApiV2StripeOrganizationsOrganizationIdBillingInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse, error) {
	rsp, err := c.PatchApiV2StripeOrganizationsOrganizationIdBillingInformation(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse(rsp)
}

// GetApiV2StripeOrganizationsOrganizationIdCardsWithResponse request returning *GetApiV2StripeOrganizationsOrganizationIdCardsResponse
func (c *ClientWithResponses) GetApiV2StripeOrganizationsOrganizationIdCardsWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*GetApiV2StripeOrganizationsOrganizationIdCardsResponse, error) {
	rsp, err := c.GetApiV2StripeOrganizationsOrganizationIdCards(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2StripeOrganizationsOrganizationIdCardsResponse(rsp)
}

// DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdWithResponse request returning *DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse
func (c *ClientWithResponses) DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdWithResponse(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, reqEditors ...RequestEditorFn) (*DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse, error) {
	rsp, err := c.DeleteApiV2StripeOrganizationsOrganizationIdCardsCardId(ctx, organizationId, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse(rsp)
}

// PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithBodyWithResponse request with arbitrary body returning *PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse
func (c *ClientWithResponses) PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithBodyWithResponse(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse, error) {
	rsp, err := c.PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithBody(ctx, organizationId, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithResponse(ctx context.Context, organizationId PathOrganizationId, cardId PathCardId, body PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse, error) {
	rsp, err := c.PatchApiV2StripeOrganizationsOrganizationIdCardsCardId(ctx, organizationId, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse(rsp)
}

// PostApiV2StripeOrganizationsOrganizationIdSetupPaymentWithResponse request returning *PostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse
func (c *ClientWithResponses) PostApiV2StripeOrganizationsOrganizationIdSetupPaymentWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse, error) {
	rsp, err := c.PostApiV2StripeOrganizationsOrganizationIdSetupPayment(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse(rsp)
}

// PostApiV2StripeOrganizationsOrganizationIdSetupWithResponse request returning *PostApiV2StripeOrganizationsOrganizationIdSetupResponse
func (c *ClientWithResponses) PostApiV2StripeOrganizationsOrganizationIdSetupWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeOrganizationsOrganizationIdSetupResponse, error) {
	rsp, err := c.PostApiV2StripeOrganizationsOrganizationIdSetup(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2StripeOrganizationsOrganizationIdSetupResponse(rsp)
}

// PostApiV2StripeOrganizationsOrganizationIdValidateCardWithResponse request returning *PostApiV2StripeOrganizationsOrganizationIdValidateCardResponse
func (c *ClientWithResponses) PostApiV2StripeOrganizationsOrganizationIdValidateCardWithResponse(ctx context.Context, organizationId PathOrganizationId, reqEditors ...RequestEditorFn) (*PostApiV2StripeOrganizationsOrganizationIdValidateCardResponse, error) {
	rsp, err := c.PostApiV2StripeOrganizationsOrganizationIdValidateCard(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2StripeOrganizationsOrganizationIdValidateCardResponse(rsp)
}

// GetApiV2StripePromotionsWithResponse request returning *GetApiV2StripePromotionsResponse
func (c *ClientWithResponses) GetApiV2StripePromotionsWithResponse(ctx context.Context, params *GetApiV2StripePromotionsParams, reqEditors ...RequestEditorFn) (*GetApiV2StripePromotionsResponse, error) {
	rsp, err := c.GetApiV2StripePromotions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2StripePromotionsResponse(rsp)
}

// DeleteApiV2StripeSubscriptionsSubscriptionIdWithResponse request returning *DeleteApiV2StripeSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) DeleteApiV2StripeSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*DeleteApiV2StripeSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.DeleteApiV2StripeSubscriptionsSubscriptionId(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2StripeSubscriptionsSubscriptionIdResponse(rsp)
}

// GetApiV2StripeSubscriptionsSubscriptionIdWithResponse request returning *GetApiV2StripeSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) GetApiV2StripeSubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2StripeSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.GetApiV2StripeSubscriptionsSubscriptionId(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2StripeSubscriptionsSubscriptionIdResponse(rsp)
}

// GetApiV2StripeSubscriptionsSubscriptionIdInvoicesWithResponse request returning *GetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse
func (c *ClientWithResponses) GetApiV2StripeSubscriptionsSubscriptionIdInvoicesWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, params *GetApiV2StripeSubscriptionsSubscriptionIdInvoicesParams, reqEditors ...RequestEditorFn) (*GetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse, error) {
	rsp, err := c.GetApiV2StripeSubscriptionsSubscriptionIdInvoices(ctx, subscriptionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse(rsp)
}

// GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingWithResponse request returning *GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse
func (c *ClientWithResponses) GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse, error) {
	rsp, err := c.GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcoming(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse(rsp)
}

// GetApiV2SubscriptionsWithResponse request returning *GetApiV2SubscriptionsResponse
func (c *ClientWithResponses) GetApiV2SubscriptionsWithResponse(ctx context.Context, params *GetApiV2SubscriptionsParams, reqEditors ...RequestEditorFn) (*GetApiV2SubscriptionsResponse, error) {
	rsp, err := c.GetApiV2Subscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2SubscriptionsResponse(rsp)
}

// PostApiV2SubscriptionsWithBodyWithResponse request with arbitrary body returning *PostApiV2SubscriptionsResponse
func (c *ClientWithResponses) PostApiV2SubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2SubscriptionsResponse, error) {
	rsp, err := c.PostApiV2SubscriptionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2SubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2SubscriptionsWithResponse(ctx context.Context, body PostApiV2SubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2SubscriptionsResponse, error) {
	rsp, err := c.PostApiV2Subscriptions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2SubscriptionsResponse(rsp)
}

// DeleteApiV2SubscriptionsSubscriptionIdWithResponse request returning *DeleteApiV2SubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) DeleteApiV2SubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*DeleteApiV2SubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.DeleteApiV2SubscriptionsSubscriptionId(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2SubscriptionsSubscriptionIdResponse(rsp)
}

// GetApiV2SubscriptionsSubscriptionIdWithResponse request returning *GetApiV2SubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) GetApiV2SubscriptionsSubscriptionIdWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2SubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.GetApiV2SubscriptionsSubscriptionId(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2SubscriptionsSubscriptionIdResponse(rsp)
}

// PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithBodyWithResponse request with arbitrary body returning *PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse
func (c *ClientWithResponses) PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithBodyWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse, error) {
	rsp, err := c.PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, body PatchApiV2SubscriptionsSubscriptionIdAssignOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse, error) {
	rsp, err := c.PatchApiV2SubscriptionsSubscriptionIdAssignOrg(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse(rsp)
}

// GetApiV2SubscriptionsSubscriptionIdWizardRedirectWithResponse request returning *GetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse
func (c *ClientWithResponses) GetApiV2SubscriptionsSubscriptionIdWizardRedirectWithResponse(ctx context.Context, subscriptionId PathSubscriptionId, reqEditors ...RequestEditorFn) (*GetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse, error) {
	rsp, err := c.GetApiV2SubscriptionsSubscriptionIdWizardRedirect(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse(rsp)
}

// GetApiV2UsersWithResponse request returning *GetApiV2UsersResponse
func (c *ClientWithResponses) GetApiV2UsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersResponse, error) {
	rsp, err := c.GetApiV2Users(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2UsersResponse(rsp)
}

// GetApiV2UsersMeWithResponse request returning *GetApiV2UsersMeResponse
func (c *ClientWithResponses) GetApiV2UsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeResponse, error) {
	rsp, err := c.GetApiV2UsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2UsersMeResponse(rsp)
}

// PatchApiV2UsersMeWithBodyWithResponse request with arbitrary body returning *PatchApiV2UsersMeResponse
func (c *ClientWithResponses) PatchApiV2UsersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2UsersMeResponse, error) {
	rsp, err := c.PatchApiV2UsersMeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2UsersMeResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2UsersMeWithResponse(ctx context.Context, body PatchApiV2UsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2UsersMeResponse, error) {
	rsp, err := c.PatchApiV2UsersMe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2UsersMeResponse(rsp)
}

// PostApiV2UsersMeAcceptInviteWithBodyWithResponse request with arbitrary body returning *PostApiV2UsersMeAcceptInviteResponse
func (c *ClientWithResponses) PostApiV2UsersMeAcceptInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2UsersMeAcceptInviteResponse, error) {
	rsp, err := c.PostApiV2UsersMeAcceptInviteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2UsersMeAcceptInviteResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2UsersMeAcceptInviteWithResponse(ctx context.Context, body PostApiV2UsersMeAcceptInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2UsersMeAcceptInviteResponse, error) {
	rsp, err := c.PostApiV2UsersMeAcceptInvite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2UsersMeAcceptInviteResponse(rsp)
}

// GetApiV2UsersMeApiKeysWithResponse request returning *GetApiV2UsersMeApiKeysResponse
func (c *ClientWithResponses) GetApiV2UsersMeApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeApiKeysResponse, error) {
	rsp, err := c.GetApiV2UsersMeApiKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2UsersMeApiKeysResponse(rsp)
}

// PostApiV2UsersMeApiKeysWithResponse request returning *PostApiV2UsersMeApiKeysResponse
func (c *ClientWithResponses) PostApiV2UsersMeApiKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV2UsersMeApiKeysResponse, error) {
	rsp, err := c.PostApiV2UsersMeApiKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2UsersMeApiKeysResponse(rsp)
}

// DeleteApiV2UsersMeApiKeysApiKeyWithResponse request returning *DeleteApiV2UsersMeApiKeysApiKeyResponse
func (c *ClientWithResponses) DeleteApiV2UsersMeApiKeysApiKeyWithResponse(ctx context.Context, apiKey PathApiKey, reqEditors ...RequestEditorFn) (*DeleteApiV2UsersMeApiKeysApiKeyResponse, error) {
	rsp, err := c.DeleteApiV2UsersMeApiKeysApiKey(ctx, apiKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2UsersMeApiKeysApiKeyResponse(rsp)
}

// GetApiV2UsersMeApiKeysApiKeyWithResponse request returning *GetApiV2UsersMeApiKeysApiKeyResponse
func (c *ClientWithResponses) GetApiV2UsersMeApiKeysApiKeyWithResponse(ctx context.Context, apiKey PathApiKey, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeApiKeysApiKeyResponse, error) {
	rsp, err := c.GetApiV2UsersMeApiKeysApiKey(ctx, apiKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2UsersMeApiKeysApiKeyResponse(rsp)
}

// PatchApiV2UsersMeApiKeysApiKeyWithBodyWithResponse request with arbitrary body returning *PatchApiV2UsersMeApiKeysApiKeyResponse
func (c *ClientWithResponses) PatchApiV2UsersMeApiKeysApiKeyWithBodyWithResponse(ctx context.Context, apiKey PathApiKey, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2UsersMeApiKeysApiKeyResponse, error) {
	rsp, err := c.PatchApiV2UsersMeApiKeysApiKeyWithBody(ctx, apiKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2UsersMeApiKeysApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2UsersMeApiKeysApiKeyWithResponse(ctx context.Context, apiKey PathApiKey, body PatchApiV2UsersMeApiKeysApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2UsersMeApiKeysApiKeyResponse, error) {
	rsp, err := c.PatchApiV2UsersMeApiKeysApiKey(ctx, apiKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2UsersMeApiKeysApiKeyResponse(rsp)
}

// PutApiV2UsersMeConfirmEmailWithBodyWithResponse request with arbitrary body returning *PutApiV2UsersMeConfirmEmailResponse
func (c *ClientWithResponses) PutApiV2UsersMeConfirmEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2UsersMeConfirmEmailResponse, error) {
	rsp, err := c.PutApiV2UsersMeConfirmEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2UsersMeConfirmEmailResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2UsersMeConfirmEmailWithResponse(ctx context.Context, body PutApiV2UsersMeConfirmEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2UsersMeConfirmEmailResponse, error) {
	rsp, err := c.PutApiV2UsersMeConfirmEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2UsersMeConfirmEmailResponse(rsp)
}

// DeleteApiV2UsersUserIdWithResponse request returning *DeleteApiV2UsersUserIdResponse
func (c *ClientWithResponses) DeleteApiV2UsersUserIdWithResponse(ctx context.Context, userId PathUserId, reqEditors ...RequestEditorFn) (*DeleteApiV2UsersUserIdResponse, error) {
	rsp, err := c.DeleteApiV2UsersUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2UsersUserIdResponse(rsp)
}

// ParseGetApiV2AwsSubscriptionsSubscriptionIdResponse parses an HTTP response from a GetApiV2AwsSubscriptionsSubscriptionIdWithResponse call
func ParseGetApiV2AwsSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*GetApiV2AwsSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2AwsSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiV2AwsSubscriptionsSubscriptionIdResponse parses an HTTP response from a PatchApiV2AwsSubscriptionsSubscriptionIdWithResponse call
func ParsePatchApiV2AwsSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*PatchApiV2AwsSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2AwsSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2AzureSubscriptionsSubscriptionIdResponse parses an HTTP response from a GetApiV2AzureSubscriptionsSubscriptionIdWithResponse call
func ParseGetApiV2AzureSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*GetApiV2AzureSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2AzureSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersResponse parses an HTTP response from a GetApiV2ClustersWithResponse call
func ParseGetApiV2ClustersResponse(rsp *http.Response) (*GetApiV2ClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseHeadApiV2ClustersNameNameResponse parses an HTTP response from a HeadApiV2ClustersNameNameWithResponse call
func ParseHeadApiV2ClustersNameNameResponse(rsp *http.Response) (*HeadApiV2ClustersNameNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadApiV2ClustersNameNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2ClustersClusterIdResponse parses an HTTP response from a DeleteApiV2ClustersClusterIdWithResponse call
func ParseDeleteApiV2ClustersClusterIdResponse(rsp *http.Response) (*DeleteApiV2ClustersClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2ClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdResponse parses an HTTP response from a GetApiV2ClustersClusterIdWithResponse call
func ParseGetApiV2ClustersClusterIdResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiV2ClustersClusterIdResponse parses an HTTP response from a PatchApiV2ClustersClusterIdWithResponse call
func ParsePatchApiV2ClustersClusterIdResponse(rsp *http.Response) (*PatchApiV2ClustersClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2ClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdAvailableProductsResponse parses an HTTP response from a GetApiV2ClustersClusterIdAvailableProductsWithResponse call
func ParseGetApiV2ClustersClusterIdAvailableProductsResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdAvailableProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdAvailableProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdAvailableUpgradesResponse parses an HTTP response from a GetApiV2ClustersClusterIdAvailableUpgradesWithResponse call
func ParseGetApiV2ClustersClusterIdAvailableUpgradesResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdAvailableUpgradesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdAvailableUpgradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CrateDBVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2ClustersClusterIdBackupScheduleResponse parses an HTTP response from a PutApiV2ClustersClusterIdBackupScheduleWithResponse call
func ParsePutApiV2ClustersClusterIdBackupScheduleResponse(rsp *http.Response) (*PutApiV2ClustersClusterIdBackupScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2ClustersClusterIdBackupScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2ClustersClusterIdDeletionProtectionResponse parses an HTTP response from a PutApiV2ClustersClusterIdDeletionProtectionWithResponse call
func ParsePutApiV2ClustersClusterIdDeletionProtectionResponse(rsp *http.Response) (*PutApiV2ClustersClusterIdDeletionProtectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2ClustersClusterIdDeletionProtectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdExportJobsResponse parses an HTTP response from a GetApiV2ClustersClusterIdExportJobsWithResponse call
func ParseGetApiV2ClustersClusterIdExportJobsResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdExportJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdExportJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClusterExportJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2ClustersClusterIdExportJobsResponse parses an HTTP response from a PostApiV2ClustersClusterIdExportJobsWithResponse call
func ParsePostApiV2ClustersClusterIdExportJobsResponse(rsp *http.Response) (*PostApiV2ClustersClusterIdExportJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2ClustersClusterIdExportJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ClusterExportJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse parses an HTTP response from a DeleteApiV2ClustersClusterIdExportJobsExportJobIdWithResponse call
func ParseDeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse(rsp *http.Response) (*DeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2ClustersClusterIdExportJobsExportJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdExportJobsExportJobIdResponse parses an HTTP response from a GetApiV2ClustersClusterIdExportJobsExportJobIdWithResponse call
func ParseGetApiV2ClustersClusterIdExportJobsExportJobIdResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdExportJobsExportJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdExportJobsExportJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterExportJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdImportJobsResponse parses an HTTP response from a GetApiV2ClustersClusterIdImportJobsWithResponse call
func ParseGetApiV2ClustersClusterIdImportJobsResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdImportJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdImportJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClusterImportJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2ClustersClusterIdImportJobsResponse parses an HTTP response from a PostApiV2ClustersClusterIdImportJobsWithResponse call
func ParsePostApiV2ClustersClusterIdImportJobsResponse(rsp *http.Response) (*PostApiV2ClustersClusterIdImportJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2ClustersClusterIdImportJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ClusterImportJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse parses an HTTP response from a DeleteApiV2ClustersClusterIdImportJobsImportJobIdWithResponse call
func ParseDeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse(rsp *http.Response) (*DeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2ClustersClusterIdImportJobsImportJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdImportJobsImportJobIdResponse parses an HTTP response from a GetApiV2ClustersClusterIdImportJobsImportJobIdWithResponse call
func ParseGetApiV2ClustersClusterIdImportJobsImportJobIdResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdImportJobsImportJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdImportJobsImportJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterImportJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse parses an HTTP response from a GetApiV2ClustersClusterIdImportJobsImportJobIdProgressWithResponse call
func ParseGetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdImportJobsImportJobIdProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataJobData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2ClustersClusterIdIpRestrictionsResponse parses an HTTP response from a PutApiV2ClustersClusterIdIpRestrictionsWithResponse call
func ParsePutApiV2ClustersClusterIdIpRestrictionsResponse(rsp *http.Response) (*PutApiV2ClustersClusterIdIpRestrictionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2ClustersClusterIdIpRestrictionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdJwtResponse parses an HTTP response from a GetApiV2ClustersClusterIdJwtWithResponse call
func ParseGetApiV2ClustersClusterIdJwtResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdJwtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdJwtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterJWTToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdMetricsMetricIdResponse parses an HTTP response from a GetApiV2ClustersClusterIdMetricsMetricIdWithResponse call
func ParseGetApiV2ClustersClusterIdMetricsMetricIdResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdMetricsMetricIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdMetricsMetricIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2ClustersClusterIdNodesOrdinalResponse parses an HTTP response from a DeleteApiV2ClustersClusterIdNodesOrdinalWithResponse call
func ParseDeleteApiV2ClustersClusterIdNodesOrdinalResponse(rsp *http.Response) (*DeleteApiV2ClustersClusterIdNodesOrdinalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2ClustersClusterIdNodesOrdinalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			ApiVersion *string `json:"apiVersion,omitempty"`
			Code       *int    `json:"code,omitempty"`
			Kind       *string `json:"kind,omitempty"`
			Status     *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdOperationsResponse parses an HTTP response from a GetApiV2ClustersClusterIdOperationsWithResponse call
func ParseGetApiV2ClustersClusterIdOperationsResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdOperationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdOperationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterAsyncOperationsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2ClustersClusterIdProductResponse parses an HTTP response from a PutApiV2ClustersClusterIdProductWithResponse call
func ParsePutApiV2ClustersClusterIdProductResponse(rsp *http.Response) (*PutApiV2ClustersClusterIdProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2ClustersClusterIdProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2ClustersClusterIdScaleResponse parses an HTTP response from a PutApiV2ClustersClusterIdScaleWithResponse call
func ParsePutApiV2ClustersClusterIdScaleResponse(rsp *http.Response) (*PutApiV2ClustersClusterIdScaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2ClustersClusterIdScaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ClustersClusterIdSnapshotsResponse parses an HTTP response from a GetApiV2ClustersClusterIdSnapshotsWithResponse call
func ParseGetApiV2ClustersClusterIdSnapshotsResponse(rsp *http.Response) (*GetApiV2ClustersClusterIdSnapshotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ClustersClusterIdSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClusterSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2ClustersClusterIdSnapshotsRestoreResponse parses an HTTP response from a PostApiV2ClustersClusterIdSnapshotsRestoreWithResponse call
func ParsePostApiV2ClustersClusterIdSnapshotsRestoreResponse(rsp *http.Response) (*PostApiV2ClustersClusterIdSnapshotsRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2ClustersClusterIdSnapshotsRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2ClustersClusterIdStorageResponse parses an HTTP response from a PutApiV2ClustersClusterIdStorageWithResponse call
func ParsePutApiV2ClustersClusterIdStorageResponse(rsp *http.Response) (*PutApiV2ClustersClusterIdStorageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2ClustersClusterIdStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2ClustersClusterIdSuspendResponse parses an HTTP response from a PutApiV2ClustersClusterIdSuspendWithResponse call
func ParsePutApiV2ClustersClusterIdSuspendResponse(rsp *http.Response) (*PutApiV2ClustersClusterIdSuspendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2ClustersClusterIdSuspendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2ClustersClusterIdUpgradeResponse parses an HTTP response from a PutApiV2ClustersClusterIdUpgradeWithResponse call
func ParsePutApiV2ClustersClusterIdUpgradeResponse(rsp *http.Response) (*PutApiV2ClustersClusterIdUpgradeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2ClustersClusterIdUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ConfigurationsResponse parses an HTTP response from a GetApiV2ConfigurationsWithResponse call
func ParseGetApiV2ConfigurationsResponse(rsp *http.Response) (*GetApiV2ConfigurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ConfigurationItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ConfigurationsKeyResponse parses an HTTP response from a GetApiV2ConfigurationsKeyWithResponse call
func ParseGetApiV2ConfigurationsKeyResponse(rsp *http.Response) (*GetApiV2ConfigurationsKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ConfigurationsKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigurationItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2ConfigurationsKeyResponse parses an HTTP response from a PutApiV2ConfigurationsKeyWithResponse call
func ParsePutApiV2ConfigurationsKeyResponse(rsp *http.Response) (*PutApiV2ConfigurationsKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2ConfigurationsKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigurationItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2FeaturesStatusResponse parses an HTTP response from a GetApiV2FeaturesStatusWithResponse call
func ParseGetApiV2FeaturesStatusResponse(rsp *http.Response) (*GetApiV2FeaturesStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2FeaturesStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureFlags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2GcpSubscriptionsSubscriptionIdResponse parses an HTTP response from a GetApiV2GcpSubscriptionsSubscriptionIdWithResponse call
func ParseGetApiV2GcpSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*GetApiV2GcpSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2GcpSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2IntegrationsAwsS3BucketsResponse parses an HTTP response from a GetApiV2IntegrationsAwsS3BucketsWithResponse call
func ParseGetApiV2IntegrationsAwsS3BucketsResponse(rsp *http.Response) (*GetApiV2IntegrationsAwsS3BucketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2IntegrationsAwsS3BucketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BucketsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2IntegrationsAwsS3ObjectsResponse parses an HTTP response from a GetApiV2IntegrationsAwsS3ObjectsWithResponse call
func ParseGetApiV2IntegrationsAwsS3ObjectsResponse(rsp *http.Response) (*GetApiV2IntegrationsAwsS3ObjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2IntegrationsAwsS3ObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2IntegrationsAzureBlobStorageContainersResponse parses an HTTP response from a GetApiV2IntegrationsAzureBlobStorageContainersWithResponse call
func ParseGetApiV2IntegrationsAzureBlobStorageContainersResponse(rsp *http.Response) (*GetApiV2IntegrationsAzureBlobStorageContainersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2IntegrationsAzureBlobStorageContainersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainersList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2IntegrationsAzureBlobsResponse parses an HTTP response from a GetApiV2IntegrationsAzureBlobsWithResponse call
func ParseGetApiV2IntegrationsAzureBlobsResponse(rsp *http.Response) (*GetApiV2IntegrationsAzureBlobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2IntegrationsAzureBlobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BlobsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2MetaResponse parses an HTTP response from a GetApiV2MetaWithResponse call
func ParseGetApiV2MetaResponse(rsp *http.Response) (*GetApiV2MetaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2MetaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2MetaCratedbVersionsResponse parses an HTTP response from a GetApiV2MetaCratedbVersionsWithResponse call
func ParseGetApiV2MetaCratedbVersionsResponse(rsp *http.Response) (*GetApiV2MetaCratedbVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2MetaCratedbVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CrateDBVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2MetaIpAddressResponse parses an HTTP response from a GetApiV2MetaIpAddressWithResponse call
func ParseGetApiV2MetaIpAddressResponse(rsp *http.Response) (*GetApiV2MetaIpAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2MetaIpAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IPAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2MetaJwkResponse parses an HTTP response from a GetApiV2MetaJwkWithResponse call
func ParseGetApiV2MetaJwkResponse(rsp *http.Response) (*GetApiV2MetaJwkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2MetaJwkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JWK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2MetaJwtRefreshResponse parses an HTTP response from a PostApiV2MetaJwtRefreshWithResponse call
func ParsePostApiV2MetaJwtRefreshResponse(rsp *http.Response) (*PostApiV2MetaJwtRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2MetaJwtRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterJWTToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsResponse parses an HTTP response from a GetApiV2OrganizationsWithResponse call
func ParseGetApiV2OrganizationsResponse(rsp *http.Response) (*GetApiV2OrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2OrganizationsResponse parses an HTTP response from a PostApiV2OrganizationsWithResponse call
func ParsePostApiV2OrganizationsResponse(rsp *http.Response) (*PostApiV2OrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2OrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2OrganizationsOrganizationIdResponse parses an HTTP response from a DeleteApiV2OrganizationsOrganizationIdWithResponse call
func ParseDeleteApiV2OrganizationsOrganizationIdResponse(rsp *http.Response) (*DeleteApiV2OrganizationsOrganizationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2OrganizationsOrganizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2OrganizationsOrganizationIdResponse parses an HTTP response from a PutApiV2OrganizationsOrganizationIdWithResponse call
func ParsePutApiV2OrganizationsOrganizationIdResponse(rsp *http.Response) (*PutApiV2OrganizationsOrganizationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2OrganizationsOrganizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdAuditlogsResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdAuditlogsWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdAuditlogsResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdAuditlogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdAuditlogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuditEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdClustersResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdClustersWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdClustersResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2OrganizationsOrganizationIdClustersResponse parses an HTTP response from a PostApiV2OrganizationsOrganizationIdClustersWithResponse call
func ParsePostApiV2OrganizationsOrganizationIdClustersResponse(rsp *http.Response) (*PostApiV2OrganizationsOrganizationIdClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2OrganizationsOrganizationIdClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdConsumptionCurrentMonthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationCurrentConsumptionSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdCreditsResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdCreditsWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdCreditsResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdCreditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdCreditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Credit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2OrganizationsOrganizationIdCreditsResponse parses an HTTP response from a PostApiV2OrganizationsOrganizationIdCreditsWithResponse call
func ParsePostApiV2OrganizationsOrganizationIdCreditsResponse(rsp *http.Response) (*PostApiV2OrganizationsOrganizationIdCreditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2OrganizationsOrganizationIdCreditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Credit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse parses an HTTP response from a DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdWithResponse call
func ParseDeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse(rsp *http.Response) (*DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2OrganizationsOrganizationIdCreditsCreditIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse parses an HTTP response from a PatchApiV2OrganizationsOrganizationIdCreditsCreditIdWithResponse call
func ParsePatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse(rsp *http.Response) (*PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2OrganizationsOrganizationIdCreditsCreditIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdCustomerResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdCustomerWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdCustomerResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2OrganizationsOrganizationIdCustomerResponse parses an HTTP response from a PutApiV2OrganizationsOrganizationIdCustomerWithResponse call
func ParsePutApiV2OrganizationsOrganizationIdCustomerResponse(rsp *http.Response) (*PutApiV2OrganizationsOrganizationIdCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2OrganizationsOrganizationIdCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdFilesResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdFilesWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdFilesResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2OrganizationsOrganizationIdFilesResponse parses an HTTP response from a PostApiV2OrganizationsOrganizationIdFilesWithResponse call
func ParsePostApiV2OrganizationsOrganizationIdFilesResponse(rsp *http.Response) (*PostApiV2OrganizationsOrganizationIdFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2OrganizationsOrganizationIdFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse parses an HTTP response from a DeleteApiV2OrganizationsOrganizationIdFilesFileIdWithResponse call
func ParseDeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse(rsp *http.Response) (*DeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2OrganizationsOrganizationIdFilesFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdFilesFileIdResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdFilesFileIdWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdFilesFileIdResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdFilesFileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdFilesFileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdInvitationsResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdInvitationsWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdInvitationsResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse parses an HTTP response from a DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenWithResponse call
func ParseDeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse(rsp *http.Response) (*DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2OrganizationsOrganizationIdInvitationsInviteTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdMetricsPrometheusWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdMetricsPrometheusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdPaymentMethodsResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdPaymentMethodsWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdPaymentMethodsResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdPaymentMethodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdPaymentMethodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PaymentMethod
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdProjectsResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdProjectsWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdProjectsResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdQuotasResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdQuotasWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdQuotasResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdQuotasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdQuotasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Quota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdRegionsResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdRegionsWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdRegionsResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdRemainingBudgetResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdRemainingBudgetWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdRemainingBudgetResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdRemainingBudgetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdRemainingBudgetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationRemainingBudget
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdSecretsResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdSecretsWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdSecretsResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2OrganizationsOrganizationIdSecretsResponse parses an HTTP response from a PostApiV2OrganizationsOrganizationIdSecretsWithResponse call
func ParsePostApiV2OrganizationsOrganizationIdSecretsResponse(rsp *http.Response) (*PostApiV2OrganizationsOrganizationIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2OrganizationsOrganizationIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse parses an HTTP response from a DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdWithResponse call
func ParseDeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse(rsp *http.Response) (*DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2OrganizationsOrganizationIdSecretsSecretIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdSubscriptionsResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdSubscriptionsWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdSubscriptionsResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdUsersResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdUsersWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdUsersResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2OrganizationsOrganizationIdUsersResponse parses an HTTP response from a PostApiV2OrganizationsOrganizationIdUsersWithResponse call
func ParsePostApiV2OrganizationsOrganizationIdUsersResponse(rsp *http.Response) (*PostApiV2OrganizationsOrganizationIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2OrganizationsOrganizationIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrganizationRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse parses an HTTP response from a DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailWithResponse call
func ParseDeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse(rsp *http.Response) (*DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2OrganizationsOrganizationIdUsersUserIdOrEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ProductsResponse parses an HTTP response from a GetApiV2ProductsWithResponse call
func ParseGetApiV2ProductsResponse(rsp *http.Response) (*GetApiV2ProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ProductsClustersPriceResponse parses an HTTP response from a GetApiV2ProductsClustersPriceWithResponse call
func ParseGetApiV2ProductsClustersPriceResponse(rsp *http.Response) (*GetApiV2ProductsClustersPriceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ProductsClustersPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductPricing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ProductsKindResponse parses an HTTP response from a GetApiV2ProductsKindWithResponse call
func ParseGetApiV2ProductsKindResponse(rsp *http.Response) (*GetApiV2ProductsKindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ProductsKindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ProjectsResponse parses an HTTP response from a GetApiV2ProjectsWithResponse call
func ParseGetApiV2ProjectsResponse(rsp *http.Response) (*GetApiV2ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2ProjectsResponse parses an HTTP response from a PostApiV2ProjectsWithResponse call
func ParsePostApiV2ProjectsResponse(rsp *http.Response) (*PostApiV2ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2ProjectsProjectIdResponse parses an HTTP response from a DeleteApiV2ProjectsProjectIdWithResponse call
func ParseDeleteApiV2ProjectsProjectIdResponse(rsp *http.Response) (*DeleteApiV2ProjectsProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2ProjectsProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ProjectsProjectIdResponse parses an HTTP response from a GetApiV2ProjectsProjectIdWithResponse call
func ParseGetApiV2ProjectsProjectIdResponse(rsp *http.Response) (*GetApiV2ProjectsProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ProjectsProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiV2ProjectsProjectIdResponse parses an HTTP response from a PatchApiV2ProjectsProjectIdWithResponse call
func ParsePatchApiV2ProjectsProjectIdResponse(rsp *http.Response) (*PatchApiV2ProjectsProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2ProjectsProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ProjectsProjectIdClustersResponse parses an HTTP response from a GetApiV2ProjectsProjectIdClustersWithResponse call
func ParseGetApiV2ProjectsProjectIdClustersResponse(rsp *http.Response) (*GetApiV2ProjectsProjectIdClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ProjectsProjectIdClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2ProjectsProjectIdUsersResponse parses an HTTP response from a GetApiV2ProjectsProjectIdUsersWithResponse call
func ParseGetApiV2ProjectsProjectIdUsersResponse(rsp *http.Response) (*GetApiV2ProjectsProjectIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ProjectsProjectIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2ProjectsProjectIdUsersResponse parses an HTTP response from a PostApiV2ProjectsProjectIdUsersWithResponse call
func ParsePostApiV2ProjectsProjectIdUsersResponse(rsp *http.Response) (*PostApiV2ProjectsProjectIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2ProjectsProjectIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProjectRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse parses an HTTP response from a DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailWithResponse call
func ParseDeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse(rsp *http.Response) (*DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2ProjectsProjectIdUsersUserIdOrEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2RegionsResponse parses an HTTP response from a GetApiV2RegionsWithResponse call
func ParseGetApiV2RegionsResponse(rsp *http.Response) (*GetApiV2RegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2RegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2RegionsResponse parses an HTTP response from a PostApiV2RegionsWithResponse call
func ParsePostApiV2RegionsResponse(rsp *http.Response) (*PostApiV2RegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2RegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2RegionsRegionNameResponse parses an HTTP response from a DeleteApiV2RegionsRegionNameWithResponse call
func ParseDeleteApiV2RegionsRegionNameResponse(rsp *http.Response) (*DeleteApiV2RegionsRegionNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2RegionsRegionNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2RegionsRegionNameInstallTokenResponse parses an HTTP response from a GetApiV2RegionsRegionNameInstallTokenWithResponse call
func ParseGetApiV2RegionsRegionNameInstallTokenResponse(rsp *http.Response) (*GetApiV2RegionsRegionNameInstallTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2RegionsRegionNameInstallTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstallToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2RegionsRegionNameVerifyBackupLocationResponse parses an HTTP response from a PostApiV2RegionsRegionNameVerifyBackupLocationWithResponse call
func ParsePostApiV2RegionsRegionNameVerifyBackupLocationResponse(rsp *http.Response) (*PostApiV2RegionsRegionNameVerifyBackupLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2RegionsRegionNameVerifyBackupLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectBackupLocationVerifyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2RolesResponse parses an HTTP response from a GetApiV2RolesWithResponse call
func ParseGetApiV2RolesResponse(rsp *http.Response) (*GetApiV2RolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2RolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse parses an HTTP response from a PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupWithResponse call
func ParsePostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse(rsp *http.Response) (*PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2StripeBankTransferOrganizationsOrganizationIdSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse parses an HTTP response from a PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentWithResponse call
func ParsePostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse(rsp *http.Response) (*PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2StripeCardOrganizationsOrganizationIdSetupPaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupPaymentIntent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2StripeCardOrganizationsOrganizationIdSetupResponse parses an HTTP response from a PostApiV2StripeCardOrganizationsOrganizationIdSetupWithResponse call
func ParsePostApiV2StripeCardOrganizationsOrganizationIdSetupResponse(rsp *http.Response) (*PostApiV2StripeCardOrganizationsOrganizationIdSetupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2StripeCardOrganizationsOrganizationIdSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupIntent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse parses an HTTP response from a GetApiV2StripeOrganizationsOrganizationIdBillingInformationWithResponse call
func ParseGetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse(rsp *http.Response) (*GetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2StripeOrganizationsOrganizationIdBillingInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse parses an HTTP response from a PatchApiV2StripeOrganizationsOrganizationIdBillingInformationWithResponse call
func ParsePatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse(rsp *http.Response) (*PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2StripeOrganizationsOrganizationIdBillingInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2StripeOrganizationsOrganizationIdCardsResponse parses an HTTP response from a GetApiV2StripeOrganizationsOrganizationIdCardsWithResponse call
func ParseGetApiV2StripeOrganizationsOrganizationIdCardsResponse(rsp *http.Response) (*GetApiV2StripeOrganizationsOrganizationIdCardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2StripeOrganizationsOrganizationIdCardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomerCard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse parses an HTTP response from a DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdWithResponse call
func ParseDeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse(rsp *http.Response) (*DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerCard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse parses an HTTP response from a PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdWithResponse call
func ParsePatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse(rsp *http.Response) (*PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2StripeOrganizationsOrganizationIdCardsCardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerCard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse parses an HTTP response from a PostApiV2StripeOrganizationsOrganizationIdSetupPaymentWithResponse call
func ParsePostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse(rsp *http.Response) (*PostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2StripeOrganizationsOrganizationIdSetupPaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupPaymentIntent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2StripeOrganizationsOrganizationIdSetupResponse parses an HTTP response from a PostApiV2StripeOrganizationsOrganizationIdSetupWithResponse call
func ParsePostApiV2StripeOrganizationsOrganizationIdSetupResponse(rsp *http.Response) (*PostApiV2StripeOrganizationsOrganizationIdSetupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2StripeOrganizationsOrganizationIdSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupIntent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2StripeOrganizationsOrganizationIdValidateCardResponse parses an HTTP response from a PostApiV2StripeOrganizationsOrganizationIdValidateCardWithResponse call
func ParsePostApiV2StripeOrganizationsOrganizationIdValidateCardResponse(rsp *http.Response) (*PostApiV2StripeOrganizationsOrganizationIdValidateCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2StripeOrganizationsOrganizationIdValidateCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidateCard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2StripePromotionsResponse parses an HTTP response from a GetApiV2StripePromotionsWithResponse call
func ParseGetApiV2StripePromotionsResponse(rsp *http.Response) (*GetApiV2StripePromotionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2StripePromotionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Promotion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2StripeSubscriptionsSubscriptionIdResponse parses an HTTP response from a DeleteApiV2StripeSubscriptionsSubscriptionIdWithResponse call
func ParseDeleteApiV2StripeSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*DeleteApiV2StripeSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2StripeSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2StripeSubscriptionsSubscriptionIdResponse parses an HTTP response from a GetApiV2StripeSubscriptionsSubscriptionIdWithResponse call
func ParseGetApiV2StripeSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*GetApiV2StripeSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2StripeSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse parses an HTTP response from a GetApiV2StripeSubscriptionsSubscriptionIdInvoicesWithResponse call
func ParseGetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse(rsp *http.Response) (*GetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2StripeSubscriptionsSubscriptionIdInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InvoiceConsumption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse parses an HTTP response from a GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingWithResponse call
func ParseGetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse(rsp *http.Response) (*GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2StripeSubscriptionsSubscriptionIdInvoicesUpcomingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceConsumption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2SubscriptionsResponse parses an HTTP response from a GetApiV2SubscriptionsWithResponse call
func ParseGetApiV2SubscriptionsResponse(rsp *http.Response) (*GetApiV2SubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2SubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2SubscriptionsResponse parses an HTTP response from a PostApiV2SubscriptionsWithResponse call
func ParsePostApiV2SubscriptionsResponse(rsp *http.Response) (*PostApiV2SubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2SubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2SubscriptionsSubscriptionIdResponse parses an HTTP response from a DeleteApiV2SubscriptionsSubscriptionIdWithResponse call
func ParseDeleteApiV2SubscriptionsSubscriptionIdResponse(rsp *http.Response) (*DeleteApiV2SubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2SubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2SubscriptionsSubscriptionIdResponse parses an HTTP response from a GetApiV2SubscriptionsSubscriptionIdWithResponse call
func ParseGetApiV2SubscriptionsSubscriptionIdResponse(rsp *http.Response) (*GetApiV2SubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2SubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse parses an HTTP response from a PatchApiV2SubscriptionsSubscriptionIdAssignOrgWithResponse call
func ParsePatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse(rsp *http.Response) (*PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2SubscriptionsSubscriptionIdAssignOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse parses an HTTP response from a GetApiV2SubscriptionsSubscriptionIdWizardRedirectWithResponse call
func ParseGetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse(rsp *http.Response) (*GetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2SubscriptionsSubscriptionIdWizardRedirectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2UsersResponse parses an HTTP response from a GetApiV2UsersWithResponse call
func ParseGetApiV2UsersResponse(rsp *http.Response) (*GetApiV2UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2UsersMeResponse parses an HTTP response from a GetApiV2UsersMeWithResponse call
func ParseGetApiV2UsersMeResponse(rsp *http.Response) (*GetApiV2UsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2UsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CurrentUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiV2UsersMeResponse parses an HTTP response from a PatchApiV2UsersMeWithResponse call
func ParsePatchApiV2UsersMeResponse(rsp *http.Response) (*PatchApiV2UsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2UsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CurrentUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Status  *string `json:"status,omitempty"`
			Success *bool   `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2UsersMeAcceptInviteResponse parses an HTTP response from a PostApiV2UsersMeAcceptInviteWithResponse call
func ParsePostApiV2UsersMeAcceptInviteResponse(rsp *http.Response) (*PostApiV2UsersMeAcceptInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2UsersMeAcceptInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrganizationRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2UsersMeApiKeysResponse parses an HTTP response from a GetApiV2UsersMeApiKeysWithResponse call
func ParseGetApiV2UsersMeApiKeysResponse(rsp *http.Response) (*GetApiV2UsersMeApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2UsersMeApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewApiKeySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV2UsersMeApiKeysResponse parses an HTTP response from a PostApiV2UsersMeApiKeysWithResponse call
func ParsePostApiV2UsersMeApiKeysResponse(rsp *http.Response) (*PostApiV2UsersMeApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2UsersMeApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NewApiKeyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2UsersMeApiKeysApiKeyResponse parses an HTTP response from a DeleteApiV2UsersMeApiKeysApiKeyWithResponse call
func ParseDeleteApiV2UsersMeApiKeysApiKeyResponse(rsp *http.Response) (*DeleteApiV2UsersMeApiKeysApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2UsersMeApiKeysApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV2UsersMeApiKeysApiKeyResponse parses an HTTP response from a GetApiV2UsersMeApiKeysApiKeyWithResponse call
func ParseGetApiV2UsersMeApiKeysApiKeyResponse(rsp *http.Response) (*GetApiV2UsersMeApiKeysApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2UsersMeApiKeysApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NewApiKeySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApiV2UsersMeApiKeysApiKeyResponse parses an HTTP response from a PatchApiV2UsersMeApiKeysApiKeyWithResponse call
func ParsePatchApiV2UsersMeApiKeysApiKeyResponse(rsp *http.Response) (*PatchApiV2UsersMeApiKeysApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2UsersMeApiKeysApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NewApiKeySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV2UsersMeConfirmEmailResponse parses an HTTP response from a PutApiV2UsersMeConfirmEmailWithResponse call
func ParsePutApiV2UsersMeConfirmEmailResponse(rsp *http.Response) (*PutApiV2UsersMeConfirmEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2UsersMeConfirmEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CurrentUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2UsersUserIdResponse parses an HTTP response from a DeleteApiV2UsersUserIdWithResponse call
func ParseDeleteApiV2UsersUserIdResponse(rsp *http.Response) (*DeleteApiV2UsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2UsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
